Package sarapatel;

Helpers
    tudo = [0 .. 0xFFFF];
    digito = ['0' .. '9'];
    letra_min = ['a'..'z'];
    letra_mai = ['A'..'Z'];
    letra = letra_min | letra_mai;
    id_letra = letra | '_';
    id_char  = letra | '_' | digito;
    espaco = ' ';
    rc = 13;
    nl = 10;
    tab = 9;
    eol = rc nl | rc | nl;
 
Tokens
    numero_int = digito+;
    numero_real = digito+ ',' digito+;
    numero_binario = '0b' ('0' | '1')+;
    decl_var = 'var';
    decl_const = 'const';
    decl_procedimento = 'procedimento';
    decl_funcao = 'funcao';
    cmd_se = 'se';
    cmd_senao = 'senao';
    cmd_enquanto = 'enquanto';
    tipo_inteiro = 'inteiro';
    tipo_booleano = 'booleano';
    tipo_real = 'real';
    tipo_cadeia = 'cadeia';
    inicio_bloco = 'comece';
    fim_bloco = 'termine';
    par_esq = '(';
    par_dir = ')';
    col_esq = '[';
    col_dir = ']';
    abre_comentario = '{';
    fecha_comentario = '}';
    atribuicao = '<<';
    partida = '>>';
    barra = '|';
    dois_pontos = ':';
    ponto_virgula = ';';
    igual = '=';
    maior_igual = '>=';
    maior = '>';
    negacao = 'nao';
    comp_e = 'e';
    comp_ou = 'ou';
    soma = '+';
    menos = '-';
    mult = '*';
    div = '/';
    mod = '%';
    verdade = 'verdade';
    falso = 'falso';
    vazio = (espaco | rc | nl | tab)+;
    cadeia = ''' [tudo - ''']* ''';
    comentario_linha = '--' [tudo - [rc + nl]]* eol;
    comentario_bloco = '{' [tudo - '}']* '}';
    id = id_letra id_char*;


Ignored Tokens
    comentario_linha,
    comentario_bloco,
    vazio;

Productions
    entrada = 
        {programa} programa_esq* programa_dir+;
    
    programa_esq = 
        {prod_decl_var} prod_decl_var
        |{prod_decl_const} prod_decl_const;

    programa_dir = 
        {prod_decl_procedimento} prod_decl_procedimento
        |{prod_decl_funcao} prod_decl_funcao;

    prod_decl_var =
        {var_id} decl_var dois_pontos tipo id ponto_virgula
        |{var_id_atribuicao} decl_var dois_pontos tipo id_atribuicao ponto_virgula;

    prod_decl_const =
        {constante} decl_const dois_pontos tipo id_atribuicao ponto_virgula;

    id_atribuicao =
        {id_atribuicao} valor atribuicao ternario_exp;

    array_comp =
        {array_comp} col_esq id barra ternario_exp col_dir;

    tipo = 
        {tipo_base} tipo_base
        | {tipo_exp} tipo col_esq ternario_exp col_dir;

    tipo_base =
        {tipo_inteiro} tipo_inteiro
        |{tipo_booleano} tipo_booleano
        |{tipo_real} tipo_real
        |{tipo_cadeia} tipo_cadeia;

    prod_decl_procedimento = 
        {prod_decl_procedimento} partida? decl_procedimento dois_pontos id par_esq parametros par_dir comando;

    prod_decl_funcao = 
        {prod_decl_funcao} decl_funcao dois_pontos tipo id par_esq parametros par_dir ternario_exp;

    parametros = 
        {parametro} parametro barra_parametro*
        |{vazio};

    barra_parametro = 
        {barra_parametro} barra parametro;
    
    parametro = 
        {tipo_parametro} tipo_parametro id;

    tipo_parametro = 
        {tipo_base} tipo_base 
        | {tipo_parametro} tipo_parametro col_esq col_dir;
    
    comando_se_solteiro = 
        {comando_se_solteiro} cmd_se par_esq ternario_exp par_dir comando
        | {comando_se_senao_solteiro} cmd_se par_esq ternario_exp par_dir [comando_se]:comando_se_casado cmd_senao [comando_senao]:comando_se_solteiro
        | {enquanto_comando} cmd_enquanto par_esq ternario_exp par_dir comando_se_solteiro;

    comando_se_casado = 
        {comando_se_senao_casado} cmd_se par_esq ternario_exp par_dir [comando_se]:comando_se_casado cmd_senao [comando_senao]:comando_se_casado
        | {enquanto_comando} cmd_enquanto par_esq ternario_exp par_dir comando_se_casado
        | {id_atribuicao_comando} id_atribuicao ponto_virgula
        | {chamada_procedimento_comando} chamada_procedimento ponto_virgula
        | {bloco_comandos} bloco_comandos;

    comando = 
        {comando_se_casado} comando_se_casado
        | {comando_se_solteiro} comando_se_solteiro;

    bloco_comandos = 
        {bloco_comandos} inicio_bloco programa_esq* comando* fim_bloco;
    
    valor = 
        {valor} id
        | {valor_array} valor col_esq ternario_exp col_dir;

    bloco_expressoes = 
        {bloco_expressoes} inicio_bloco prod_decl_const* ternario_exp fim_bloco;

    chamada_funcao = 
        {chamada_funcao} id par_esq lista_exp par_dir;

    chamada_procedimento = 
        {chamada_procedimento} id par_esq lista_exp par_dir;

    lista_exp = 
        {lista_exp} ternario_exp barra_exp*
        | {vazio};

    ternario_exp = {ternario} ternario;
    
    ternario = 
        {exp} exp
        | {ternario} cmd_se par_esq exp par_dir [ternario_verdade]:ternario cmd_senao [ternario_falso]:ternario;

    barra_exp = 
        {barra_exp} barra ternario_exp;
    
    exp =
        {prio1} prio1 
        |{comp_ou} exp comp_ou prio1;

    prio1 =
        {prio2} prio2
        |{comp_e} prio1 comp_e prio2;

    prio2 =
        {prio3} prio3
        |{igual} prio2 igual prio3;

    prio3 =
        {prio4} prio4
        |{maior_igual} prio3 maior_igual prio4
        |{maior} prio3 maior prio4;
    
    prio4 =
        {prio5} prio5
        |{soma} prio4 soma prio5
        |{menos} prio4 menos prio5;

    prio5 =
        {prio6} prio6
        |{mult} prio5 mult prio6
        |{div} prio5 div prio6
        |{mod} prio5 mod prio6;
        
    prio6 =
        {prio7} prio7
        |{negacao} negacao prio7
        |{negativo} menos prio7;

    prio7 =
        {numero_int} numero_int
        |{numero_real} numero_real
        |{booleano} verdade | falso
        |{cadeia} cadeia
        |{valor} valor
        |{chamada_funcao} chamada_funcao
        |{array_comp} array_comp
        |{bloco_expressoes} bloco_expressoes
        |{par} par_esq ternario_exp par_dir;

Abstract Syntax Tree
    entrada =
     {programa} programa_esq* programa_dir+
     ;

    programa_esq =
     {prod_decl_var} prod_decl_var |
     {prod_decl_const} prod_decl_const
     ;

    programa_dir =
     {prod_decl_procedimento} prod_decl_procedimento |
     {prod_decl_funcao} prod_decl_funcao
     ;

    prod_decl_var =
     {var_id} decl_var dois_pontos tipo id ponto_virgula |
     {var_id_atribuicao} decl_var dois_pontos tipo id_atribuicao ponto_virgula
     ;

    prod_decl_const =
     {constante} decl_const dois_pontos tipo id_atribuicao ponto_virgula
     ;

    id_atribuicao =
     {id_atribuicao} valor atribuicao ternario_exp
     ;

    array_comp =
     {array_comp} col_esq id barra ternario_exp col_dir
     ;

    tipo =
     {tipo_base} tipo_base |
     {tipo_exp} tipo col_esq ternario_exp col_dir
     ;

    tipo_base =
     {tipo_inteiro} tipo_inteiro |
     {tipo_booleano} tipo_booleano |
     {tipo_real} tipo_real |
     {tipo_cadeia} tipo_cadeia
     ;

    prod_decl_procedimento =
     {prod_decl_procedimento} partida? decl_procedimento dois_pontos id par_esq parametros par_dir comando
     ;

    prod_decl_funcao =
     {prod_decl_funcao} decl_funcao dois_pontos tipo id par_esq parametros par_dir ternario_exp
     ;

    parametros =
     {parametro} parametro barra_parametro* |
     {vazio}
     ;

    barra_parametro =
     {barra_parametro} barra parametro
     ;

    parametro =
     {tipo_parametro} tipo_parametro id
     ;

    tipo_parametro =
     {tipo_base} tipo_base |
     {tipo_parametro} tipo_parametro col_esq col_dir
     ;

    comando_se_solteiro =
     {comando_se_solteiro} cmd_se par_esq ternario_exp par_dir comando |
     {comando_se_senao_solteiro} cmd_se par_esq ternario_exp par_dir [comando_se]: comando_se_casado cmd_senao [comando_senao]: comando_se_solteiro |
     {enquanto_comando} cmd_enquanto par_esq ternario_exp par_dir comando_se_solteiro
     ;

    comando_se_casado =
     {comando_se_senao_casado} cmd_se par_esq ternario_exp par_dir [comando_se]: comando_se_casado cmd_senao [comando_senao]: comando_se_casado |
     {enquanto_comando} cmd_enquanto par_esq ternario_exp par_dir comando_se_casado |
     {id_atribuicao_comando} id_atribuicao ponto_virgula |
     {chamada_procedimento_comando} chamada_procedimento ponto_virgula |
     {bloco_comandos} bloco_comandos
     ;

    comando =
     {comando_se_casado} comando_se_casado |
     {comando_se_solteiro} comando_se_solteiro
     ;

    bloco_comandos =
     {bloco_comandos} inicio_bloco programa_esq* comando* fim_bloco
     ;

    valor =
     {valor} id |
     {valor_array} valor col_esq ternario_exp col_dir
     ;

    bloco_expressoes =
     {bloco_expressoes} inicio_bloco prod_decl_const* ternario_exp fim_bloco
     ;

    chamada_funcao =
     {chamada_funcao} id par_esq lista_exp par_dir
     ;

    chamada_procedimento =
     {chamada_procedimento} id par_esq lista_exp par_dir
     ;

    lista_exp =
     {lista_exp} ternario_exp barra_exp* |
     {vazio}
     ;

    ternario_exp =
     {ternario} ternario
     ;

    ternario =
     {exp} exp |
     {ternario} cmd_se par_esq exp par_dir [ternario_verdade]: ternario cmd_senao [ternario_falso]: ternario
     ;

    barra_exp =
     {barra_exp} barra ternario_exp
     ;

    exp = 
        {ou} [esquerda]: exp [direita]: exp
        |{e} [esquerda]: exp [direita]: exp
        |{igual} [esquerda]: exp [direita]: exp
        |{maior_igual} [esquerda]: exp [direita]: exp
        |{maior} [esquerda]: exp [direita]: exp
        |{ou} [esquerda]: exp [direita]: exp
        |{ou} [esquerda]: exp [direita]: exp
        |{ou} [esquerda]: exp [direita]: exp
        |{ou} [esquerda]: exp [direita]: exp

    exp =
     {prio1} prio1 |
     {comp_ou} exp comp_ou prio1
     ;

    prio1 =
     {prio2} prio2 |
     {comp_e} prio1 comp_e prio2
     ;

    prio2 =
     {prio3} prio3 |
     {igual} prio2 igual prio3
     ;

    prio3 =
     {prio4} prio4 |
     {maior_igual} prio3 maior_igual prio4 | 
     {maior} prio3 maior prio4
     ;

    prio4 =
     {prio5} prio5 |
     {soma} prio4 soma prio5 |
     {menos} prio4 menos prio5
     ;

    prio5 =
     {prio6} prio6 |
     {mult} prio5 mult prio6 |
     {div} prio5 div prio6 |
     {mod} prio5 mod prio6
     ;

    prio6 =
     {prio7} prio7 |
     {negacao} negacao prio7 |
     {negativo} menos prio7
     ;

    prio7 =
     {numero_int} numero_int |
     {numero_real} numero_real |
     {booleano} verdade |
     falso |
     {cadeia} cadeia |
     {valor} valor |
     {chamada_funcao} chamada_funcao |
     {array_comp} array_comp |
     {bloco_expressoes} bloco_expressoes |
     {par} par_esq ternario_exp par_dir
     ;