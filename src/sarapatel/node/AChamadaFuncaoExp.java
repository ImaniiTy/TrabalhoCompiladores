/* This file was generated by SableCC (http://www.sablecc.org/). */

package sarapatel.node;

import java.util.*;
import sarapatel.analysis.*;

@SuppressWarnings("nls")
public final class AChamadaFuncaoExp extends PExp
{
    private TId _id_;
    private final LinkedList<PExp> _listaExp_ = new LinkedList<PExp>();

    public AChamadaFuncaoExp()
    {
        // Constructor
    }

    public AChamadaFuncaoExp(
        @SuppressWarnings("hiding") TId _id_,
        @SuppressWarnings("hiding") List<?> _listaExp_)
    {
        // Constructor
        setId(_id_);

        setListaExp(_listaExp_);

    }

    @Override
    public Object clone()
    {
        return new AChamadaFuncaoExp(
            cloneNode(this._id_),
            cloneList(this._listaExp_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAChamadaFuncaoExp(this);
    }

    public TId getId()
    {
        return this._id_;
    }

    public void setId(TId node)
    {
        if(this._id_ != null)
        {
            this._id_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._id_ = node;
    }

    public LinkedList<PExp> getListaExp()
    {
        return this._listaExp_;
    }

    public void setListaExp(List<?> list)
    {
        for(PExp e : this._listaExp_)
        {
            e.parent(null);
        }
        this._listaExp_.clear();

        for(Object obj_e : list)
        {
            PExp e = (PExp) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._listaExp_.add(e);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._id_)
            + toString(this._listaExp_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._id_ == child)
        {
            this._id_ = null;
            return;
        }

        if(this._listaExp_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._id_ == oldChild)
        {
            setId((TId) newChild);
            return;
        }

        for(ListIterator<PExp> i = this._listaExp_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PExp) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
