/* This file was generated by SableCC (http://www.sablecc.org/). */

package sarapatel.parser;

import sarapatel.lexer.*;
import sarapatel.node.*;
import sarapatel.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList<Object> listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PEntrada node1 = (PEntrada) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AAprogramaentrada1Entrada */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list, false);
            }
            break;
            case 1: /* reduce AAprogramaentrada2Entrada */
            {
                ArrayList<Object> list = new1();
                push(goTo(0), list, false);
            }
            break;
            case 2: /* reduce AProdDecVarPrograma */
            {
                ArrayList<Object> list = new2();
                push(goTo(1), list, false);
            }
            break;
            case 3: /* reduce AProdDecConstPrograma */
            {
                ArrayList<Object> list = new3();
                push(goTo(1), list, false);
            }
            break;
            case 4: /* reduce AVarIdProdDecVar */
            {
                ArrayList<Object> list = new4();
                push(goTo(2), list, false);
            }
            break;
            case 5: /* reduce AVarIdAtribuicaoProdDecVar */
            {
                ArrayList<Object> list = new5();
                push(goTo(2), list, false);
            }
            break;
            case 6: /* reduce AConstanteProdDecConst */
            {
                ArrayList<Object> list = new6();
                push(goTo(3), list, false);
            }
            break;
            case 7: /* reduce AIdAtribuicaoIdAtribuicao */
            {
                ArrayList<Object> list = new7();
                push(goTo(4), list, false);
            }
            break;
            case 8: /* reduce ATipoInteiroTipo */
            {
                ArrayList<Object> list = new8();
                push(goTo(5), list, false);
            }
            break;
            case 9: /* reduce ATipoBooleanoTipo */
            {
                ArrayList<Object> list = new9();
                push(goTo(5), list, false);
            }
            break;
            case 10: /* reduce ATipoRealTipo */
            {
                ArrayList<Object> list = new10();
                push(goTo(5), list, false);
            }
            break;
            case 11: /* reduce ATipoCadeiaTipo */
            {
                ArrayList<Object> list = new11();
                push(goTo(5), list, false);
            }
            break;
            case 12: /* reduce APrio1Prio0 */
            {
                ArrayList<Object> list = new12();
                push(goTo(6), list, false);
            }
            break;
            case 13: /* reduce ACompOuPrio0 */
            {
                ArrayList<Object> list = new13();
                push(goTo(6), list, false);
            }
            break;
            case 14: /* reduce APrio2Prio1 */
            {
                ArrayList<Object> list = new14();
                push(goTo(7), list, false);
            }
            break;
            case 15: /* reduce ACompEPrio1 */
            {
                ArrayList<Object> list = new15();
                push(goTo(7), list, false);
            }
            break;
            case 16: /* reduce APrio3Prio2 */
            {
                ArrayList<Object> list = new16();
                push(goTo(8), list, false);
            }
            break;
            case 17: /* reduce AIgualPrio2 */
            {
                ArrayList<Object> list = new17();
                push(goTo(8), list, false);
            }
            break;
            case 18: /* reduce APrio4Prio3 */
            {
                ArrayList<Object> list = new18();
                push(goTo(9), list, false);
            }
            break;
            case 19: /* reduce AMaiorIgualPrio3 */
            {
                ArrayList<Object> list = new19();
                push(goTo(9), list, false);
            }
            break;
            case 20: /* reduce AMaiorPrio3 */
            {
                ArrayList<Object> list = new20();
                push(goTo(9), list, false);
            }
            break;
            case 21: /* reduce APrio5Prio4 */
            {
                ArrayList<Object> list = new21();
                push(goTo(10), list, false);
            }
            break;
            case 22: /* reduce ASomaPrio4 */
            {
                ArrayList<Object> list = new22();
                push(goTo(10), list, false);
            }
            break;
            case 23: /* reduce AMenosPrio4 */
            {
                ArrayList<Object> list = new23();
                push(goTo(10), list, false);
            }
            break;
            case 24: /* reduce APrio6Prio5 */
            {
                ArrayList<Object> list = new24();
                push(goTo(11), list, false);
            }
            break;
            case 25: /* reduce AMultPrio5 */
            {
                ArrayList<Object> list = new25();
                push(goTo(11), list, false);
            }
            break;
            case 26: /* reduce ADivPrio5 */
            {
                ArrayList<Object> list = new26();
                push(goTo(11), list, false);
            }
            break;
            case 27: /* reduce AModPrio5 */
            {
                ArrayList<Object> list = new27();
                push(goTo(11), list, false);
            }
            break;
            case 28: /* reduce APrio7Prio6 */
            {
                ArrayList<Object> list = new28();
                push(goTo(12), list, false);
            }
            break;
            case 29: /* reduce ANegacaoPrio6 */
            {
                ArrayList<Object> list = new29();
                push(goTo(12), list, false);
            }
            break;
            case 30: /* reduce ANumeroIntPrio7 */
            {
                ArrayList<Object> list = new30();
                push(goTo(13), list, false);
            }
            break;
            case 31: /* reduce ANumeroRealPrio7 */
            {
                ArrayList<Object> list = new31();
                push(goTo(13), list, false);
            }
            break;
            case 32: /* reduce ABooleanoPrio7 */
            {
                ArrayList<Object> list = new32();
                push(goTo(13), list, false);
            }
            break;
            case 33: /* reduce APrio7 */
            {
                ArrayList<Object> list = new33();
                push(goTo(13), list, false);
            }
            break;
            case 34: /* reduce AParPrio7 */
            {
                ArrayList<Object> list = new34();
                push(goTo(13), list, false);
            }
            break;
            case 35: /* reduce ATerminal$Programa */
            {
                ArrayList<Object> list = new35();
                push(goTo(14), list, true);
            }
            break;
            case 36: /* reduce ANonTerminal$Programa */
            {
                ArrayList<Object> list = new36();
                push(goTo(14), list, true);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AAprogramaentrada1Entrada */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PEntrada pentradaNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        }

        pentradaNode1 = new AProgramaEntrada(listNode2);
        }
	nodeList.add(pentradaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AAprogramaentrada2Entrada */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PEntrada pentradaNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pentradaNode1 = new AProgramaEntrada(listNode3);
        }
	nodeList.add(pentradaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AProdDecVarPrograma */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrograma pprogramaNode1;
        {
            // Block
        PProdDecVar pproddecvarNode2;
        pproddecvarNode2 = (PProdDecVar)nodeArrayList1.get(0);

        pprogramaNode1 = new AProdDecVarPrograma(pproddecvarNode2);
        }
	nodeList.add(pprogramaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AProdDecConstPrograma */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrograma pprogramaNode1;
        {
            // Block
        PProdDecConst pproddecconstNode2;
        pproddecconstNode2 = (PProdDecConst)nodeArrayList1.get(0);

        pprogramaNode1 = new AProdDecConstPrograma(pproddecconstNode2);
        }
	nodeList.add(pprogramaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AVarIdProdDecVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProdDecVar pproddecvarNode1;
        {
            // Block
        TDeclVar tdeclvarNode2;
        TDoisPontos tdoispontosNode3;
        PTipo ptipoNode4;
        TId tidNode5;
        TPontoVirgula tpontovirgulaNode6;
        tdeclvarNode2 = (TDeclVar)nodeArrayList1.get(0);
        tdoispontosNode3 = (TDoisPontos)nodeArrayList2.get(0);
        ptipoNode4 = (PTipo)nodeArrayList3.get(0);
        tidNode5 = (TId)nodeArrayList4.get(0);
        tpontovirgulaNode6 = (TPontoVirgula)nodeArrayList5.get(0);

        pproddecvarNode1 = new AVarIdProdDecVar(tdeclvarNode2, tdoispontosNode3, ptipoNode4, tidNode5, tpontovirgulaNode6);
        }
	nodeList.add(pproddecvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AVarIdAtribuicaoProdDecVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProdDecVar pproddecvarNode1;
        {
            // Block
        TDeclVar tdeclvarNode2;
        TDoisPontos tdoispontosNode3;
        PTipo ptipoNode4;
        PIdAtribuicao pidatribuicaoNode5;
        TPontoVirgula tpontovirgulaNode6;
        tdeclvarNode2 = (TDeclVar)nodeArrayList1.get(0);
        tdoispontosNode3 = (TDoisPontos)nodeArrayList2.get(0);
        ptipoNode4 = (PTipo)nodeArrayList3.get(0);
        pidatribuicaoNode5 = (PIdAtribuicao)nodeArrayList4.get(0);
        tpontovirgulaNode6 = (TPontoVirgula)nodeArrayList5.get(0);

        pproddecvarNode1 = new AVarIdAtribuicaoProdDecVar(tdeclvarNode2, tdoispontosNode3, ptipoNode4, pidatribuicaoNode5, tpontovirgulaNode6);
        }
	nodeList.add(pproddecvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AConstanteProdDecConst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProdDecConst pproddecconstNode1;
        {
            // Block
        TDeclConst tdeclconstNode2;
        TDoisPontos tdoispontosNode3;
        PTipo ptipoNode4;
        PIdAtribuicao pidatribuicaoNode5;
        TPontoVirgula tpontovirgulaNode6;
        tdeclconstNode2 = (TDeclConst)nodeArrayList1.get(0);
        tdoispontosNode3 = (TDoisPontos)nodeArrayList2.get(0);
        ptipoNode4 = (PTipo)nodeArrayList3.get(0);
        pidatribuicaoNode5 = (PIdAtribuicao)nodeArrayList4.get(0);
        tpontovirgulaNode6 = (TPontoVirgula)nodeArrayList5.get(0);

        pproddecconstNode1 = new AConstanteProdDecConst(tdeclconstNode2, tdoispontosNode3, ptipoNode4, pidatribuicaoNode5, tpontovirgulaNode6);
        }
	nodeList.add(pproddecconstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce AIdAtribuicaoIdAtribuicao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIdAtribuicao pidatribuicaoNode1;
        {
            // Block
        TId tidNode2;
        TAtribuicao tatribuicaoNode3;
        PPrio0 pprio0Node4;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tatribuicaoNode3 = (TAtribuicao)nodeArrayList2.get(0);
        pprio0Node4 = (PPrio0)nodeArrayList3.get(0);

        pidatribuicaoNode1 = new AIdAtribuicaoIdAtribuicao(tidNode2, tatribuicaoNode3, pprio0Node4);
        }
	nodeList.add(pidatribuicaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce ATipoInteiroTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipo ptipoNode1;
        {
            // Block
        TTipoInteiro ttipointeiroNode2;
        ttipointeiroNode2 = (TTipoInteiro)nodeArrayList1.get(0);

        ptipoNode1 = new ATipoInteiroTipo(ttipointeiroNode2);
        }
	nodeList.add(ptipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce ATipoBooleanoTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipo ptipoNode1;
        {
            // Block
        TTipoBooleano ttipobooleanoNode2;
        ttipobooleanoNode2 = (TTipoBooleano)nodeArrayList1.get(0);

        ptipoNode1 = new ATipoBooleanoTipo(ttipobooleanoNode2);
        }
	nodeList.add(ptipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce ATipoRealTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipo ptipoNode1;
        {
            // Block
        TTipoReal ttiporealNode2;
        ttiporealNode2 = (TTipoReal)nodeArrayList1.get(0);

        ptipoNode1 = new ATipoRealTipo(ttiporealNode2);
        }
	nodeList.add(ptipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce ATipoCadeiaTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipo ptipoNode1;
        {
            // Block
        TTipoCadeia ttipocadeiaNode2;
        ttipocadeiaNode2 = (TTipoCadeia)nodeArrayList1.get(0);

        ptipoNode1 = new ATipoCadeiaTipo(ttipocadeiaNode2);
        }
	nodeList.add(ptipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce APrio1Prio0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrio0 pprio0Node1;
        {
            // Block
        PPrio1 pprio1Node2;
        pprio1Node2 = (PPrio1)nodeArrayList1.get(0);

        pprio0Node1 = new APrio1Prio0(pprio1Node2);
        }
	nodeList.add(pprio0Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce ACompOuPrio0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrio0 pprio0Node1;
        {
            // Block
        PPrio0 pprio0Node2;
        TCompOu tcompouNode3;
        PPrio1 pprio1Node4;
        pprio0Node2 = (PPrio0)nodeArrayList1.get(0);
        tcompouNode3 = (TCompOu)nodeArrayList2.get(0);
        pprio1Node4 = (PPrio1)nodeArrayList3.get(0);

        pprio0Node1 = new ACompOuPrio0(pprio0Node2, tcompouNode3, pprio1Node4);
        }
	nodeList.add(pprio0Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce APrio2Prio1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrio1 pprio1Node1;
        {
            // Block
        PPrio2 pprio2Node2;
        pprio2Node2 = (PPrio2)nodeArrayList1.get(0);

        pprio1Node1 = new APrio2Prio1(pprio2Node2);
        }
	nodeList.add(pprio1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce ACompEPrio1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrio1 pprio1Node1;
        {
            // Block
        PPrio1 pprio1Node2;
        TCompE tcompeNode3;
        PPrio2 pprio2Node4;
        pprio1Node2 = (PPrio1)nodeArrayList1.get(0);
        tcompeNode3 = (TCompE)nodeArrayList2.get(0);
        pprio2Node4 = (PPrio2)nodeArrayList3.get(0);

        pprio1Node1 = new ACompEPrio1(pprio1Node2, tcompeNode3, pprio2Node4);
        }
	nodeList.add(pprio1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce APrio3Prio2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrio2 pprio2Node1;
        {
            // Block
        PPrio3 pprio3Node2;
        pprio3Node2 = (PPrio3)nodeArrayList1.get(0);

        pprio2Node1 = new APrio3Prio2(pprio3Node2);
        }
	nodeList.add(pprio2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AIgualPrio2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrio2 pprio2Node1;
        {
            // Block
        PPrio2 pprio2Node2;
        TIgual tigualNode3;
        PPrio3 pprio3Node4;
        pprio2Node2 = (PPrio2)nodeArrayList1.get(0);
        tigualNode3 = (TIgual)nodeArrayList2.get(0);
        pprio3Node4 = (PPrio3)nodeArrayList3.get(0);

        pprio2Node1 = new AIgualPrio2(pprio2Node2, tigualNode3, pprio3Node4);
        }
	nodeList.add(pprio2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce APrio4Prio3 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrio3 pprio3Node1;
        {
            // Block
        PPrio4 pprio4Node2;
        pprio4Node2 = (PPrio4)nodeArrayList1.get(0);

        pprio3Node1 = new APrio4Prio3(pprio4Node2);
        }
	nodeList.add(pprio3Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AMaiorIgualPrio3 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrio3 pprio3Node1;
        {
            // Block
        PPrio3 pprio3Node2;
        TMaiorIgual tmaiorigualNode3;
        PPrio4 pprio4Node4;
        pprio3Node2 = (PPrio3)nodeArrayList1.get(0);
        tmaiorigualNode3 = (TMaiorIgual)nodeArrayList2.get(0);
        pprio4Node4 = (PPrio4)nodeArrayList3.get(0);

        pprio3Node1 = new AMaiorIgualPrio3(pprio3Node2, tmaiorigualNode3, pprio4Node4);
        }
	nodeList.add(pprio3Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AMaiorPrio3 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrio3 pprio3Node1;
        {
            // Block
        PPrio3 pprio3Node2;
        TMaior tmaiorNode3;
        PPrio4 pprio4Node4;
        pprio3Node2 = (PPrio3)nodeArrayList1.get(0);
        tmaiorNode3 = (TMaior)nodeArrayList2.get(0);
        pprio4Node4 = (PPrio4)nodeArrayList3.get(0);

        pprio3Node1 = new AMaiorPrio3(pprio3Node2, tmaiorNode3, pprio4Node4);
        }
	nodeList.add(pprio3Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce APrio5Prio4 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrio4 pprio4Node1;
        {
            // Block
        PPrio5 pprio5Node2;
        pprio5Node2 = (PPrio5)nodeArrayList1.get(0);

        pprio4Node1 = new APrio5Prio4(pprio5Node2);
        }
	nodeList.add(pprio4Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce ASomaPrio4 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrio4 pprio4Node1;
        {
            // Block
        PPrio4 pprio4Node2;
        TSoma tsomaNode3;
        PPrio5 pprio5Node4;
        pprio4Node2 = (PPrio4)nodeArrayList1.get(0);
        tsomaNode3 = (TSoma)nodeArrayList2.get(0);
        pprio5Node4 = (PPrio5)nodeArrayList3.get(0);

        pprio4Node1 = new ASomaPrio4(pprio4Node2, tsomaNode3, pprio5Node4);
        }
	nodeList.add(pprio4Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce AMenosPrio4 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrio4 pprio4Node1;
        {
            // Block
        PPrio4 pprio4Node2;
        TMenos tmenosNode3;
        PPrio5 pprio5Node4;
        pprio4Node2 = (PPrio4)nodeArrayList1.get(0);
        tmenosNode3 = (TMenos)nodeArrayList2.get(0);
        pprio5Node4 = (PPrio5)nodeArrayList3.get(0);

        pprio4Node1 = new AMenosPrio4(pprio4Node2, tmenosNode3, pprio5Node4);
        }
	nodeList.add(pprio4Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce APrio6Prio5 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrio5 pprio5Node1;
        {
            // Block
        PPrio6 pprio6Node2;
        pprio6Node2 = (PPrio6)nodeArrayList1.get(0);

        pprio5Node1 = new APrio6Prio5(pprio6Node2);
        }
	nodeList.add(pprio5Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce AMultPrio5 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrio5 pprio5Node1;
        {
            // Block
        PPrio5 pprio5Node2;
        TMult tmultNode3;
        PPrio6 pprio6Node4;
        pprio5Node2 = (PPrio5)nodeArrayList1.get(0);
        tmultNode3 = (TMult)nodeArrayList2.get(0);
        pprio6Node4 = (PPrio6)nodeArrayList3.get(0);

        pprio5Node1 = new AMultPrio5(pprio5Node2, tmultNode3, pprio6Node4);
        }
	nodeList.add(pprio5Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce ADivPrio5 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrio5 pprio5Node1;
        {
            // Block
        PPrio5 pprio5Node2;
        TDiv tdivNode3;
        PPrio6 pprio6Node4;
        pprio5Node2 = (PPrio5)nodeArrayList1.get(0);
        tdivNode3 = (TDiv)nodeArrayList2.get(0);
        pprio6Node4 = (PPrio6)nodeArrayList3.get(0);

        pprio5Node1 = new ADivPrio5(pprio5Node2, tdivNode3, pprio6Node4);
        }
	nodeList.add(pprio5Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce AModPrio5 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrio5 pprio5Node1;
        {
            // Block
        PPrio5 pprio5Node2;
        TMod tmodNode3;
        PPrio6 pprio6Node4;
        pprio5Node2 = (PPrio5)nodeArrayList1.get(0);
        tmodNode3 = (TMod)nodeArrayList2.get(0);
        pprio6Node4 = (PPrio6)nodeArrayList3.get(0);

        pprio5Node1 = new AModPrio5(pprio5Node2, tmodNode3, pprio6Node4);
        }
	nodeList.add(pprio5Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce APrio7Prio6 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrio6 pprio6Node1;
        {
            // Block
        PPrio7 pprio7Node2;
        pprio7Node2 = (PPrio7)nodeArrayList1.get(0);

        pprio6Node1 = new APrio7Prio6(pprio7Node2);
        }
	nodeList.add(pprio6Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce ANegacaoPrio6 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrio6 pprio6Node1;
        {
            // Block
        PPrio6 pprio6Node2;
        TNegacao tnegacaoNode3;
        PPrio7 pprio7Node4;
        pprio6Node2 = (PPrio6)nodeArrayList1.get(0);
        tnegacaoNode3 = (TNegacao)nodeArrayList2.get(0);
        pprio7Node4 = (PPrio7)nodeArrayList3.get(0);

        pprio6Node1 = new ANegacaoPrio6(pprio6Node2, tnegacaoNode3, pprio7Node4);
        }
	nodeList.add(pprio6Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce ANumeroIntPrio7 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrio7 pprio7Node1;
        {
            // Block
        TNumeroInt tnumerointNode2;
        tnumerointNode2 = (TNumeroInt)nodeArrayList1.get(0);

        pprio7Node1 = new ANumeroIntPrio7(tnumerointNode2);
        }
	nodeList.add(pprio7Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce ANumeroRealPrio7 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrio7 pprio7Node1;
        {
            // Block
        TNumeroReal tnumerorealNode2;
        tnumerorealNode2 = (TNumeroReal)nodeArrayList1.get(0);

        pprio7Node1 = new ANumeroRealPrio7(tnumerorealNode2);
        }
	nodeList.add(pprio7Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce ABooleanoPrio7 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrio7 pprio7Node1;
        {
            // Block
        TVerdade tverdadeNode2;
        tverdadeNode2 = (TVerdade)nodeArrayList1.get(0);

        pprio7Node1 = new ABooleanoPrio7(tverdadeNode2);
        }
	nodeList.add(pprio7Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce APrio7 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrio7 pprio7Node1;
        {
            // Block
        TFalso tfalsoNode2;
        tfalsoNode2 = (TFalso)nodeArrayList1.get(0);

        pprio7Node1 = new APrio7(tfalsoNode2);
        }
	nodeList.add(pprio7Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce AParPrio7 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrio7 pprio7Node1;
        {
            // Block
        TParEsq tparesqNode2;
        PPrio0 pprio0Node3;
        TParDir tpardirNode4;
        tparesqNode2 = (TParEsq)nodeArrayList1.get(0);
        pprio0Node3 = (PPrio0)nodeArrayList2.get(0);
        tpardirNode4 = (TParDir)nodeArrayList3.get(0);

        pprio7Node1 = new AParPrio7(tparesqNode2, pprio0Node3, tpardirNode4);
        }
	nodeList.add(pprio7Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce ATerminal$Programa */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PPrograma pprogramaNode1;
        pprogramaNode1 = (PPrograma)nodeArrayList1.get(0);
	if(pprogramaNode1 != null)
	{
	  listNode2.add(pprogramaNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce ANonTerminal$Programa */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PPrograma pprogramaNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pprogramaNode2 = (PPrograma)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pprogramaNode2 != null)
	{
	  listNode3.add(pprogramaNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, REDUCE, 0}, {3, SHIFT, 1}, {4, SHIFT, 2}, },
			{{-1, ERROR, 1}, {25, SHIFT, 8}, },
			{{-1, ERROR, 2}, {25, SHIFT, 9}, },
			{{-1, ERROR, 3}, {44, ACCEPT, -1}, },
			{{-1, REDUCE, 35}, },
			{{-1, REDUCE, 2}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 1}, {3, SHIFT, 1}, {4, SHIFT, 2}, },
			{{-1, ERROR, 8}, {10, SHIFT, 11}, {11, SHIFT, 12}, {12, SHIFT, 13}, {13, SHIFT, 14}, },
			{{-1, ERROR, 9}, {10, SHIFT, 11}, {11, SHIFT, 12}, {12, SHIFT, 13}, {13, SHIFT, 14}, },
			{{-1, REDUCE, 36}, },
			{{-1, REDUCE, 8}, },
			{{-1, REDUCE, 9}, },
			{{-1, REDUCE, 10}, },
			{{-1, REDUCE, 11}, },
			{{-1, ERROR, 15}, {43, SHIFT, 17}, },
			{{-1, ERROR, 16}, {43, SHIFT, 19}, },
			{{-1, ERROR, 17}, {22, SHIFT, 21}, {26, SHIFT, 22}, },
			{{-1, ERROR, 18}, {26, SHIFT, 23}, },
			{{-1, ERROR, 19}, {22, SHIFT, 21}, },
			{{-1, ERROR, 20}, {26, SHIFT, 24}, },
			{{-1, ERROR, 21}, {0, SHIFT, 25}, {1, SHIFT, 26}, {16, SHIFT, 27}, {38, SHIFT, 28}, {39, SHIFT, 29}, },
			{{-1, REDUCE, 4}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 6}, },
			{{-1, REDUCE, 30}, },
			{{-1, REDUCE, 31}, },
			{{-1, ERROR, 27}, {0, SHIFT, 25}, {1, SHIFT, 26}, {16, SHIFT, 27}, {38, SHIFT, 28}, {39, SHIFT, 29}, },
			{{-1, REDUCE, 32}, },
			{{-1, REDUCE, 33}, },
			{{-1, REDUCE, 7}, {32, SHIFT, 39}, },
			{{-1, REDUCE, 12}, {31, SHIFT, 40}, },
			{{-1, REDUCE, 14}, {27, SHIFT, 41}, },
			{{-1, REDUCE, 16}, {28, SHIFT, 42}, {29, SHIFT, 43}, },
			{{-1, REDUCE, 18}, {33, SHIFT, 44}, {34, SHIFT, 45}, },
			{{-1, REDUCE, 21}, {35, SHIFT, 46}, {36, SHIFT, 47}, {37, SHIFT, 48}, },
			{{-1, REDUCE, 24}, {30, SHIFT, 49}, },
			{{-1, REDUCE, 28}, },
			{{-1, ERROR, 38}, {17, SHIFT, 50}, {32, SHIFT, 39}, },
			{{-1, ERROR, 39}, {0, SHIFT, 25}, {1, SHIFT, 26}, {16, SHIFT, 27}, {38, SHIFT, 28}, {39, SHIFT, 29}, },
			{{-1, ERROR, 40}, {0, SHIFT, 25}, {1, SHIFT, 26}, {16, SHIFT, 27}, {38, SHIFT, 28}, {39, SHIFT, 29}, },
			{{-1, ERROR, 41}, {0, SHIFT, 25}, {1, SHIFT, 26}, {16, SHIFT, 27}, {38, SHIFT, 28}, {39, SHIFT, 29}, },
			{{-1, ERROR, 42}, {0, SHIFT, 25}, {1, SHIFT, 26}, {16, SHIFT, 27}, {38, SHIFT, 28}, {39, SHIFT, 29}, },
			{{-1, ERROR, 43}, {0, SHIFT, 25}, {1, SHIFT, 26}, {16, SHIFT, 27}, {38, SHIFT, 28}, {39, SHIFT, 29}, },
			{{-1, ERROR, 44}, {0, SHIFT, 25}, {1, SHIFT, 26}, {16, SHIFT, 27}, {38, SHIFT, 28}, {39, SHIFT, 29}, },
			{{-1, ERROR, 45}, {0, SHIFT, 25}, {1, SHIFT, 26}, {16, SHIFT, 27}, {38, SHIFT, 28}, {39, SHIFT, 29}, },
			{{-1, ERROR, 46}, {0, SHIFT, 25}, {1, SHIFT, 26}, {16, SHIFT, 27}, {38, SHIFT, 28}, {39, SHIFT, 29}, },
			{{-1, ERROR, 47}, {0, SHIFT, 25}, {1, SHIFT, 26}, {16, SHIFT, 27}, {38, SHIFT, 28}, {39, SHIFT, 29}, },
			{{-1, ERROR, 48}, {0, SHIFT, 25}, {1, SHIFT, 26}, {16, SHIFT, 27}, {38, SHIFT, 28}, {39, SHIFT, 29}, },
			{{-1, ERROR, 49}, {0, SHIFT, 25}, {1, SHIFT, 26}, {16, SHIFT, 27}, {38, SHIFT, 28}, {39, SHIFT, 29}, },
			{{-1, REDUCE, 34}, },
			{{-1, REDUCE, 13}, {31, SHIFT, 40}, },
			{{-1, REDUCE, 15}, {27, SHIFT, 41}, },
			{{-1, REDUCE, 17}, {28, SHIFT, 42}, {29, SHIFT, 43}, },
			{{-1, REDUCE, 19}, {33, SHIFT, 44}, {34, SHIFT, 45}, },
			{{-1, REDUCE, 20}, {33, SHIFT, 44}, {34, SHIFT, 45}, },
			{{-1, REDUCE, 22}, {35, SHIFT, 46}, {36, SHIFT, 47}, {37, SHIFT, 48}, },
			{{-1, REDUCE, 23}, {35, SHIFT, 46}, {36, SHIFT, 47}, {37, SHIFT, 48}, },
			{{-1, REDUCE, 25}, {30, SHIFT, 49}, },
			{{-1, REDUCE, 26}, {30, SHIFT, 49}, },
			{{-1, REDUCE, 27}, {30, SHIFT, 49}, },
			{{-1, REDUCE, 29}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 3}, },
			{{-1, 4}, {7, 10}, },
			{{-1, 5}, },
			{{-1, 6}, },
			{{-1, 18}, {16, 20}, },
			{{-1, 15}, {9, 16}, },
			{{-1, 30}, {27, 38}, },
			{{-1, 31}, {39, 51}, },
			{{-1, 32}, {40, 52}, },
			{{-1, 33}, {41, 53}, },
			{{-1, 34}, {42, 54}, {43, 55}, },
			{{-1, 35}, {44, 56}, {45, 57}, },
			{{-1, 36}, {46, 58}, {47, 59}, {48, 60}, },
			{{-1, 37}, {49, 61}, },
			{{-1, 7}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'var', 'const', EOF",
			"expecting: ':'",
			"expecting: EOF",
			"expecting: 'inteiro', 'booleano', 'real', 'cadeia'",
			"expecting: id",
			"expecting: '<<', ';'",
			"expecting: ';'",
			"expecting: '<<'",
			"expecting: numero int, numero real, '(', 'verdade', 'falso'",
			"expecting: ')', ';', '=', '>=', '>', 'nao', 'e', 'ou', '+', '-', '*', '/', '%'",
			"expecting: ';', 'ou'",
			"expecting: ')', ';', 'e', 'ou'",
			"expecting: ')', ';', '=', 'e', 'ou'",
			"expecting: ')', ';', '=', '>=', '>', 'e', 'ou'",
			"expecting: ')', ';', '=', '>=', '>', 'e', 'ou', '+', '-'",
			"expecting: ')', ';', '=', '>=', '>', 'e', 'ou', '+', '-', '*', '/', '%'",
			"expecting: ')', 'ou'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 1, 2, 0, 0, 0, 0, 3, 3, 0, 4, 4, 4, 4, 4, 4, 5, 6, 7, 6, 8, 0, 0, 0, 9, 9, 8, 9, 9, 10, 11, 12, 13, 14, 15, 9, 9, 16, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 11, 12, 13, 14, 14, 15, 15, 9, 9, 9, 9, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
