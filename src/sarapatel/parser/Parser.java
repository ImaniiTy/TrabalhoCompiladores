/* This file was generated by SableCC (http://www.sablecc.org/). */

package sarapatel.parser;

import sarapatel.lexer.*;
import sarapatel.node.*;
import sarapatel.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    @SuppressWarnings({"unchecked","unused"})
    private void push(int numstate, ArrayList<Object> listNode) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PEntrada node1 = (PEntrada) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AAprogramaentrada1Entrada */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list);
            }
            break;
            case 1: /* reduce AAprogramaentrada2Entrada */
            {
                ArrayList<Object> list = new1();
                push(goTo(0), list);
            }
            break;
            case 2: /* reduce AProdDeclVarProgramaEsq */
            {
                ArrayList<Object> list = new2();
                push(goTo(1), list);
            }
            break;
            case 3: /* reduce AProdDeclConstProgramaEsq */
            {
                ArrayList<Object> list = new3();
                push(goTo(1), list);
            }
            break;
            case 4: /* reduce AProdDeclProcedimentoProgramaDir */
            {
                ArrayList<Object> list = new4();
                push(goTo(2), list);
            }
            break;
            case 5: /* reduce AProdDeclFuncaoProgramaDir */
            {
                ArrayList<Object> list = new5();
                push(goTo(2), list);
            }
            break;
            case 6: /* reduce AVarIdProdDeclVar */
            {
                ArrayList<Object> list = new6();
                push(goTo(3), list);
            }
            break;
            case 7: /* reduce AVarIdAtribuicaoProdDeclVar */
            {
                ArrayList<Object> list = new7();
                push(goTo(3), list);
            }
            break;
            case 8: /* reduce AConstanteProdDeclConst */
            {
                ArrayList<Object> list = new8();
                push(goTo(4), list);
            }
            break;
            case 9: /* reduce AIdAtribuicaoIdAtribuicao */
            {
                ArrayList<Object> list = new9();
                push(goTo(5), list);
            }
            break;
            case 10: /* reduce AArrayCompArrayComp */
            {
                ArrayList<Object> list = new10();
                push(goTo(6), list);
            }
            break;
            case 11: /* reduce ATipoBaseTipo */
            {
                ArrayList<Object> list = new11();
                push(goTo(7), list);
            }
            break;
            case 12: /* reduce ATipoExpTipo */
            {
                ArrayList<Object> list = new12();
                push(goTo(7), list);
            }
            break;
            case 13: /* reduce ATipoInteiroTipoBase */
            {
                ArrayList<Object> list = new13();
                push(goTo(8), list);
            }
            break;
            case 14: /* reduce ATipoBooleanoTipoBase */
            {
                ArrayList<Object> list = new14();
                push(goTo(8), list);
            }
            break;
            case 15: /* reduce ATipoRealTipoBase */
            {
                ArrayList<Object> list = new15();
                push(goTo(8), list);
            }
            break;
            case 16: /* reduce ATipoCadeiaTipoBase */
            {
                ArrayList<Object> list = new16();
                push(goTo(8), list);
            }
            break;
            case 17: /* reduce AAproddeclprocedimentoproddeclprocedimento1ProdDeclProcedimento */
            {
                ArrayList<Object> list = new17();
                push(goTo(9), list);
            }
            break;
            case 18: /* reduce AAproddeclprocedimentoproddeclprocedimento2ProdDeclProcedimento */
            {
                ArrayList<Object> list = new18();
                push(goTo(9), list);
            }
            break;
            case 19: /* reduce AProdDeclFuncaoProdDeclFuncao */
            {
                ArrayList<Object> list = new19();
                push(goTo(10), list);
            }
            break;
            case 20: /* reduce AAparametroparametros1Parametros */
            {
                ArrayList<Object> list = new20();
                push(goTo(11), list);
            }
            break;
            case 21: /* reduce AAparametroparametros2Parametros */
            {
                ArrayList<Object> list = new21();
                push(goTo(11), list);
            }
            break;
            case 22: /* reduce AVazioParametros */
            {
                ArrayList<Object> list = new22();
                push(goTo(11), list);
            }
            break;
            case 23: /* reduce ABarraParametroBarraParametro */
            {
                ArrayList<Object> list = new23();
                push(goTo(12), list);
            }
            break;
            case 24: /* reduce ATipoParametroParametro */
            {
                ArrayList<Object> list = new24();
                push(goTo(13), list);
            }
            break;
            case 25: /* reduce ATipoBaseTipoParametro */
            {
                ArrayList<Object> list = new25();
                push(goTo(14), list);
            }
            break;
            case 26: /* reduce ATipoParametroTipoParametro */
            {
                ArrayList<Object> list = new26();
                push(goTo(14), list);
            }
            break;
            case 27: /* reduce AComandoSeSolteiroComandoSeSolteiro */
            {
                ArrayList<Object> list = new27();
                push(goTo(15), list);
            }
            break;
            case 28: /* reduce AComandoSeSenaoSolteiroComandoSeSolteiro */
            {
                ArrayList<Object> list = new28();
                push(goTo(15), list);
            }
            break;
            case 29: /* reduce AEnquantoComandoComandoSeSolteiro */
            {
                ArrayList<Object> list = new29();
                push(goTo(15), list);
            }
            break;
            case 30: /* reduce AComandoSeSenaoCasadoComandoSeCasado */
            {
                ArrayList<Object> list = new30();
                push(goTo(16), list);
            }
            break;
            case 31: /* reduce AEnquantoComandoComandoSeCasado */
            {
                ArrayList<Object> list = new31();
                push(goTo(16), list);
            }
            break;
            case 32: /* reduce AIdAtribuicaoComandoComandoSeCasado */
            {
                ArrayList<Object> list = new32();
                push(goTo(16), list);
            }
            break;
            case 33: /* reduce AChamadaProcedimentoComandoComandoSeCasado */
            {
                ArrayList<Object> list = new33();
                push(goTo(16), list);
            }
            break;
            case 34: /* reduce ABlocoComandosComandoSeCasado */
            {
                ArrayList<Object> list = new34();
                push(goTo(16), list);
            }
            break;
            case 35: /* reduce AComandoSeCasadoComando */
            {
                ArrayList<Object> list = new35();
                push(goTo(17), list);
            }
            break;
            case 36: /* reduce AComandoSeSolteiroComando */
            {
                ArrayList<Object> list = new36();
                push(goTo(17), list);
            }
            break;
            case 37: /* reduce AAblococomandosblococomandos1BlocoComandos */
            {
                ArrayList<Object> list = new37();
                push(goTo(18), list);
            }
            break;
            case 38: /* reduce AAblococomandosblococomandos2BlocoComandos */
            {
                ArrayList<Object> list = new38();
                push(goTo(18), list);
            }
            break;
            case 39: /* reduce AAblococomandosblococomandos3BlocoComandos */
            {
                ArrayList<Object> list = new39();
                push(goTo(18), list);
            }
            break;
            case 40: /* reduce AAblococomandosblococomandos4BlocoComandos */
            {
                ArrayList<Object> list = new40();
                push(goTo(18), list);
            }
            break;
            case 41: /* reduce AValorValor */
            {
                ArrayList<Object> list = new41();
                push(goTo(19), list);
            }
            break;
            case 42: /* reduce AValorArrayValor */
            {
                ArrayList<Object> list = new42();
                push(goTo(19), list);
            }
            break;
            case 43: /* reduce AAblocoexpressoesblocoexpressoes1BlocoExpressoes */
            {
                ArrayList<Object> list = new43();
                push(goTo(20), list);
            }
            break;
            case 44: /* reduce AAblocoexpressoesblocoexpressoes2BlocoExpressoes */
            {
                ArrayList<Object> list = new44();
                push(goTo(20), list);
            }
            break;
            case 45: /* reduce AChamadaFuncaoChamadaFuncao */
            {
                ArrayList<Object> list = new45();
                push(goTo(21), list);
            }
            break;
            case 46: /* reduce AChamadaProcedimentoChamadaProcedimento */
            {
                ArrayList<Object> list = new46();
                push(goTo(22), list);
            }
            break;
            case 47: /* reduce ATernarioListaExp */
            {
                ArrayList<Object> list = new47();
                push(goTo(23), list);
            }
            break;
            case 48: /* reduce AListaExpListaExp */
            {
                ArrayList<Object> list = new48();
                push(goTo(23), list);
            }
            break;
            case 49: /* reduce AVazioListaExp */
            {
                ArrayList<Object> list = new49();
                push(goTo(23), list);
            }
            break;
            case 50: /* reduce AExpTernario */
            {
                ArrayList<Object> list = new50();
                push(goTo(24), list);
            }
            break;
            case 51: /* reduce ATernarioTernario */
            {
                ArrayList<Object> list = new51();
                push(goTo(24), list);
            }
            break;
            case 52: /* reduce APrio1Exp */
            {
                ArrayList<Object> list = new52();
                push(goTo(25), list);
            }
            break;
            case 53: /* reduce ACompOuExp */
            {
                ArrayList<Object> list = new53();
                push(goTo(25), list);
            }
            break;
            case 54: /* reduce APrio2Prio1 */
            {
                ArrayList<Object> list = new54();
                push(goTo(26), list);
            }
            break;
            case 55: /* reduce ACompEPrio1 */
            {
                ArrayList<Object> list = new55();
                push(goTo(26), list);
            }
            break;
            case 56: /* reduce APrio3Prio2 */
            {
                ArrayList<Object> list = new56();
                push(goTo(27), list);
            }
            break;
            case 57: /* reduce AIgualPrio2 */
            {
                ArrayList<Object> list = new57();
                push(goTo(27), list);
            }
            break;
            case 58: /* reduce APrio4Prio3 */
            {
                ArrayList<Object> list = new58();
                push(goTo(28), list);
            }
            break;
            case 59: /* reduce AMaiorIgualPrio3 */
            {
                ArrayList<Object> list = new59();
                push(goTo(28), list);
            }
            break;
            case 60: /* reduce AMaiorPrio3 */
            {
                ArrayList<Object> list = new60();
                push(goTo(28), list);
            }
            break;
            case 61: /* reduce APrio5Prio4 */
            {
                ArrayList<Object> list = new61();
                push(goTo(29), list);
            }
            break;
            case 62: /* reduce ASomaPrio4 */
            {
                ArrayList<Object> list = new62();
                push(goTo(29), list);
            }
            break;
            case 63: /* reduce AMenosPrio4 */
            {
                ArrayList<Object> list = new63();
                push(goTo(29), list);
            }
            break;
            case 64: /* reduce APrio6Prio5 */
            {
                ArrayList<Object> list = new64();
                push(goTo(30), list);
            }
            break;
            case 65: /* reduce AMultPrio5 */
            {
                ArrayList<Object> list = new65();
                push(goTo(30), list);
            }
            break;
            case 66: /* reduce ADivPrio5 */
            {
                ArrayList<Object> list = new66();
                push(goTo(30), list);
            }
            break;
            case 67: /* reduce AModPrio5 */
            {
                ArrayList<Object> list = new67();
                push(goTo(30), list);
            }
            break;
            case 68: /* reduce APrio7Prio6 */
            {
                ArrayList<Object> list = new68();
                push(goTo(31), list);
            }
            break;
            case 69: /* reduce ANegacaoPrio6 */
            {
                ArrayList<Object> list = new69();
                push(goTo(31), list);
            }
            break;
            case 70: /* reduce ANegativoPrio6 */
            {
                ArrayList<Object> list = new70();
                push(goTo(31), list);
            }
            break;
            case 71: /* reduce ANumeroIntPrio7 */
            {
                ArrayList<Object> list = new71();
                push(goTo(32), list);
            }
            break;
            case 72: /* reduce ANumeroRealPrio7 */
            {
                ArrayList<Object> list = new72();
                push(goTo(32), list);
            }
            break;
            case 73: /* reduce ACadeiaPrio7 */
            {
                ArrayList<Object> list = new73();
                push(goTo(32), list);
            }
            break;
            case 74: /* reduce AVerdadePrio7 */
            {
                ArrayList<Object> list = new74();
                push(goTo(32), list);
            }
            break;
            case 75: /* reduce AFalsoPrio7 */
            {
                ArrayList<Object> list = new75();
                push(goTo(32), list);
            }
            break;
            case 76: /* reduce AValorPrio7 */
            {
                ArrayList<Object> list = new76();
                push(goTo(32), list);
            }
            break;
            case 77: /* reduce AChamadaFuncaoPrio7 */
            {
                ArrayList<Object> list = new77();
                push(goTo(32), list);
            }
            break;
            case 78: /* reduce ABlocoExpressoesPrio7 */
            {
                ArrayList<Object> list = new78();
                push(goTo(32), list);
            }
            break;
            case 79: /* reduce AArrayCompPrio7 */
            {
                ArrayList<Object> list = new79();
                push(goTo(32), list);
            }
            break;
            case 80: /* reduce AParPrio7 */
            {
                ArrayList<Object> list = new80();
                push(goTo(32), list);
            }
            break;
            case 81: /* reduce ATerminal$ProgramaDir */
            {
                ArrayList<Object> list = new81();
                push(goTo(33), list);
            }
            break;
            case 82: /* reduce ANonTerminal$ProgramaDir */
            {
                ArrayList<Object> list = new82();
                push(goTo(33), list);
            }
            break;
            case 83: /* reduce ATerminal$ProgramaEsq */
            {
                ArrayList<Object> list = new83();
                push(goTo(34), list);
            }
            break;
            case 84: /* reduce ANonTerminal$ProgramaEsq */
            {
                ArrayList<Object> list = new84();
                push(goTo(34), list);
            }
            break;
            case 85: /* reduce ATerminal$BarraParametro */
            {
                ArrayList<Object> list = new85();
                push(goTo(35), list);
            }
            break;
            case 86: /* reduce ANonTerminal$BarraParametro */
            {
                ArrayList<Object> list = new86();
                push(goTo(35), list);
            }
            break;
            case 87: /* reduce ATerminal$Comando */
            {
                ArrayList<Object> list = new87();
                push(goTo(36), list);
            }
            break;
            case 88: /* reduce ANonTerminal$Comando */
            {
                ArrayList<Object> list = new88();
                push(goTo(36), list);
            }
            break;
            case 89: /* reduce ATerminal$ProdDeclConst */
            {
                ArrayList<Object> list = new89();
                push(goTo(37), list);
            }
            break;
            case 90: /* reduce ANonTerminal$ProdDeclConst */
            {
                ArrayList<Object> list = new90();
                push(goTo(37), list);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AAprogramaentrada1Entrada */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PEntrada pentradaNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList1.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pentradaNode1 = new AProgramaEntrada(listNode2, listNode4);
        }
	nodeList.add(pentradaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AAprogramaentrada2Entrada */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PEntrada pentradaNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList2.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pentradaNode1 = new AProgramaEntrada(listNode3, listNode5);
        }
	nodeList.add(pentradaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AProdDeclVarProgramaEsq */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgramaEsq pprogramaesqNode1;
        {
            // Block
        PProdDeclVar pproddeclvarNode2;
        pproddeclvarNode2 = (PProdDeclVar)nodeArrayList1.get(0);

        pprogramaesqNode1 = new AProdDeclVarProgramaEsq(pproddeclvarNode2);
        }
	nodeList.add(pprogramaesqNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AProdDeclConstProgramaEsq */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgramaEsq pprogramaesqNode1;
        {
            // Block
        PProdDeclConst pproddeclconstNode2;
        pproddeclconstNode2 = (PProdDeclConst)nodeArrayList1.get(0);

        pprogramaesqNode1 = new AProdDeclConstProgramaEsq(pproddeclconstNode2);
        }
	nodeList.add(pprogramaesqNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AProdDeclProcedimentoProgramaDir */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgramaDir pprogramadirNode1;
        {
            // Block
        PProdDeclProcedimento pproddeclprocedimentoNode2;
        pproddeclprocedimentoNode2 = (PProdDeclProcedimento)nodeArrayList1.get(0);

        pprogramadirNode1 = new AProdDeclProcedimentoProgramaDir(pproddeclprocedimentoNode2);
        }
	nodeList.add(pprogramadirNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AProdDeclFuncaoProgramaDir */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgramaDir pprogramadirNode1;
        {
            // Block
        PProdDeclFuncao pproddeclfuncaoNode2;
        pproddeclfuncaoNode2 = (PProdDeclFuncao)nodeArrayList1.get(0);

        pprogramadirNode1 = new AProdDeclFuncaoProgramaDir(pproddeclfuncaoNode2);
        }
	nodeList.add(pprogramadirNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AVarIdProdDeclVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProdDeclVar pproddeclvarNode1;
        {
            // Block
        TDeclVar tdeclvarNode2;
        TDoisPontos tdoispontosNode3;
        PTipo ptipoNode4;
        TId tidNode5;
        TPontoVirgula tpontovirgulaNode6;
        tdeclvarNode2 = (TDeclVar)nodeArrayList1.get(0);
        tdoispontosNode3 = (TDoisPontos)nodeArrayList2.get(0);
        ptipoNode4 = (PTipo)nodeArrayList3.get(0);
        tidNode5 = (TId)nodeArrayList4.get(0);
        tpontovirgulaNode6 = (TPontoVirgula)nodeArrayList5.get(0);

        pproddeclvarNode1 = new AVarIdProdDeclVar(tdeclvarNode2, tdoispontosNode3, ptipoNode4, tidNode5, tpontovirgulaNode6);
        }
	nodeList.add(pproddeclvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce AVarIdAtribuicaoProdDeclVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProdDeclVar pproddeclvarNode1;
        {
            // Block
        TDeclVar tdeclvarNode2;
        TDoisPontos tdoispontosNode3;
        PTipo ptipoNode4;
        PIdAtribuicao pidatribuicaoNode5;
        TPontoVirgula tpontovirgulaNode6;
        tdeclvarNode2 = (TDeclVar)nodeArrayList1.get(0);
        tdoispontosNode3 = (TDoisPontos)nodeArrayList2.get(0);
        ptipoNode4 = (PTipo)nodeArrayList3.get(0);
        pidatribuicaoNode5 = (PIdAtribuicao)nodeArrayList4.get(0);
        tpontovirgulaNode6 = (TPontoVirgula)nodeArrayList5.get(0);

        pproddeclvarNode1 = new AVarIdAtribuicaoProdDeclVar(tdeclvarNode2, tdoispontosNode3, ptipoNode4, pidatribuicaoNode5, tpontovirgulaNode6);
        }
	nodeList.add(pproddeclvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce AConstanteProdDeclConst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProdDeclConst pproddeclconstNode1;
        {
            // Block
        PTipo ptipoNode2;
        PIdAtribuicao pidatribuicaoNode3;
        ptipoNode2 = (PTipo)nodeArrayList3.get(0);
        pidatribuicaoNode3 = (PIdAtribuicao)nodeArrayList4.get(0);

        pproddeclconstNode1 = new AConstanteProdDeclConst(ptipoNode2, pidatribuicaoNode3);
        }
	nodeList.add(pproddeclconstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AIdAtribuicaoIdAtribuicao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIdAtribuicao pidatribuicaoNode1;
        {
            // Block
        PValor pvalorNode2;
        PExp pexpNode3;
        pvalorNode2 = (PValor)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pidatribuicaoNode1 = new AIdAtribuicaoIdAtribuicao(pvalorNode2, pexpNode3);
        }
	nodeList.add(pidatribuicaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce AArrayCompArrayComp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TId tidNode2;
        PExp pexpNode3;
        tidNode2 = (TId)nodeArrayList2.get(0);
        pexpNode3 = (PExp)nodeArrayList4.get(0);

        pexpNode1 = new AArrayCompExp(tidNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce ATipoBaseTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipo ptipoNode1;
        {
            // Block
        PTipoBase ptipobaseNode2;
        ptipobaseNode2 = (PTipoBase)nodeArrayList1.get(0);

        ptipoNode1 = new ATipoBaseTipo(ptipobaseNode2);
        }
	nodeList.add(ptipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce ATipoExpTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipo ptipoNode1;
        {
            // Block
        PTipo ptipoNode2;
        PExp pexpNode3;
        ptipoNode2 = (PTipo)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        ptipoNode1 = new ATipoExpTipo(ptipoNode2, pexpNode3);
        }
	nodeList.add(ptipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce ATipoInteiroTipoBase */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipoBase ptipobaseNode1;
        {
            // Block
        TTipoInteiro ttipointeiroNode2;
        ttipointeiroNode2 = (TTipoInteiro)nodeArrayList1.get(0);

        ptipobaseNode1 = new ATipoInteiroTipoBase(ttipointeiroNode2);
        }
	nodeList.add(ptipobaseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce ATipoBooleanoTipoBase */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipoBase ptipobaseNode1;
        {
            // Block
        TTipoBooleano ttipobooleanoNode2;
        ttipobooleanoNode2 = (TTipoBooleano)nodeArrayList1.get(0);

        ptipobaseNode1 = new ATipoBooleanoTipoBase(ttipobooleanoNode2);
        }
	nodeList.add(ptipobaseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce ATipoRealTipoBase */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipoBase ptipobaseNode1;
        {
            // Block
        TTipoReal ttiporealNode2;
        ttiporealNode2 = (TTipoReal)nodeArrayList1.get(0);

        ptipobaseNode1 = new ATipoRealTipoBase(ttiporealNode2);
        }
	nodeList.add(ptipobaseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce ATipoCadeiaTipoBase */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipoBase ptipobaseNode1;
        {
            // Block
        TTipoCadeia ttipocadeiaNode2;
        ttipocadeiaNode2 = (TTipoCadeia)nodeArrayList1.get(0);

        ptipobaseNode1 = new ATipoCadeiaTipoBase(ttipocadeiaNode2);
        }
	nodeList.add(ptipobaseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AAproddeclprocedimentoproddeclprocedimento1ProdDeclProcedimento */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProdDeclProcedimento pproddeclprocedimentoNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        TDeclProcedimento tdeclprocedimentoNode3;
        TDoisPontos tdoispontosNode4;
        TId tidNode5;
        TParEsq tparesqNode6;
        PParametros pparametrosNode7;
        TParDir tpardirNode8;
        PComando pcomandoNode9;
        tdeclprocedimentoNode3 = (TDeclProcedimento)nodeArrayList1.get(0);
        tdoispontosNode4 = (TDoisPontos)nodeArrayList2.get(0);
        tidNode5 = (TId)nodeArrayList3.get(0);
        tparesqNode6 = (TParEsq)nodeArrayList4.get(0);
        pparametrosNode7 = (PParametros)nodeArrayList5.get(0);
        tpardirNode8 = (TParDir)nodeArrayList6.get(0);
        pcomandoNode9 = (PComando)nodeArrayList7.get(0);

        pproddeclprocedimentoNode1 = new AProdDeclProcedimentoProdDeclProcedimento(null, tdeclprocedimentoNode3, tdoispontosNode4, tidNode5, tparesqNode6, pparametrosNode7, tpardirNode8, pcomandoNode9);
        }
	nodeList.add(pproddeclprocedimentoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AAproddeclprocedimentoproddeclprocedimento2ProdDeclProcedimento */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProdDeclProcedimento pproddeclprocedimentoNode1;
        {
            // Block
        TPartida tpartidaNode2;
        TDeclProcedimento tdeclprocedimentoNode3;
        TDoisPontos tdoispontosNode4;
        TId tidNode5;
        TParEsq tparesqNode6;
        PParametros pparametrosNode7;
        TParDir tpardirNode8;
        PComando pcomandoNode9;
        tpartidaNode2 = (TPartida)nodeArrayList1.get(0);
        tdeclprocedimentoNode3 = (TDeclProcedimento)nodeArrayList2.get(0);
        tdoispontosNode4 = (TDoisPontos)nodeArrayList3.get(0);
        tidNode5 = (TId)nodeArrayList4.get(0);
        tparesqNode6 = (TParEsq)nodeArrayList5.get(0);
        pparametrosNode7 = (PParametros)nodeArrayList6.get(0);
        tpardirNode8 = (TParDir)nodeArrayList7.get(0);
        pcomandoNode9 = (PComando)nodeArrayList8.get(0);

        pproddeclprocedimentoNode1 = new AProdDeclProcedimentoProdDeclProcedimento(tpartidaNode2, tdeclprocedimentoNode3, tdoispontosNode4, tidNode5, tparesqNode6, pparametrosNode7, tpardirNode8, pcomandoNode9);
        }
	nodeList.add(pproddeclprocedimentoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AProdDeclFuncaoProdDeclFuncao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProdDeclFuncao pproddeclfuncaoNode1;
        {
            // Block
        PTipo ptipoNode2;
        TId tidNode3;
        PParametros pparametrosNode4;
        PExp pexpNode5;
        ptipoNode2 = (PTipo)nodeArrayList3.get(0);
        tidNode3 = (TId)nodeArrayList4.get(0);
        pparametrosNode4 = (PParametros)nodeArrayList6.get(0);
        pexpNode5 = (PExp)nodeArrayList8.get(0);

        pproddeclfuncaoNode1 = new AProdDeclFuncaoProdDeclFuncao(ptipoNode2, tidNode3, pparametrosNode4, pexpNode5);
        }
	nodeList.add(pproddeclfuncaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AAparametroparametros1Parametros */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParametros pparametrosNode1;
        {
            // Block
        PParametro pparametroNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        pparametroNode2 = (PParametro)nodeArrayList1.get(0);
        {
            // Block
        }

        pparametrosNode1 = new AParametroParametros(pparametroNode2, listNode3);
        }
	nodeList.add(pparametrosNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AAparametroparametros2Parametros */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParametros pparametrosNode1;
        {
            // Block
        PParametro pparametroNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pparametroNode2 = (PParametro)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pparametrosNode1 = new AParametroParametros(pparametroNode2, listNode4);
        }
	nodeList.add(pparametrosNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce AVazioParametros */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PParametros pparametrosNode1;
        {
            // Block

        pparametrosNode1 = new AVazioParametros();
        }
	nodeList.add(pparametrosNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce ABarraParametroBarraParametro */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBarraParametro pbarraparametroNode1;
        {
            // Block
        TBarra tbarraNode2;
        PParametro pparametroNode3;
        tbarraNode2 = (TBarra)nodeArrayList1.get(0);
        pparametroNode3 = (PParametro)nodeArrayList2.get(0);

        pbarraparametroNode1 = new ABarraParametroBarraParametro(tbarraNode2, pparametroNode3);
        }
	nodeList.add(pbarraparametroNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce ATipoParametroParametro */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParametro pparametroNode1;
        {
            // Block
        PTipoParametro ptipoparametroNode2;
        TId tidNode3;
        ptipoparametroNode2 = (PTipoParametro)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);

        pparametroNode1 = new ATipoParametroParametro(ptipoparametroNode2, tidNode3);
        }
	nodeList.add(pparametroNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce ATipoBaseTipoParametro */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipoParametro ptipoparametroNode1;
        {
            // Block
        PTipoBase ptipobaseNode2;
        ptipobaseNode2 = (PTipoBase)nodeArrayList1.get(0);

        ptipoparametroNode1 = new ATipoBaseTipoParametro(ptipobaseNode2);
        }
	nodeList.add(ptipoparametroNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce ATipoParametroTipoParametro */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipoParametro ptipoparametroNode1;
        {
            // Block
        PTipoParametro ptipoparametroNode2;
        TColEsq tcolesqNode3;
        TColDir tcoldirNode4;
        ptipoparametroNode2 = (PTipoParametro)nodeArrayList1.get(0);
        tcolesqNode3 = (TColEsq)nodeArrayList2.get(0);
        tcoldirNode4 = (TColDir)nodeArrayList3.get(0);

        ptipoparametroNode1 = new ATipoParametroTipoParametro(ptipoparametroNode2, tcolesqNode3, tcoldirNode4);
        }
	nodeList.add(ptipoparametroNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce AComandoSeSolteiroComandoSeSolteiro */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComandoSeSolteiro pcomandosesolteiroNode1;
        {
            // Block
        PExp pexpNode2;
        PComando pcomandoNode3;
        pexpNode2 = (PExp)nodeArrayList3.get(0);
        pcomandoNode3 = (PComando)nodeArrayList5.get(0);

        pcomandosesolteiroNode1 = new AComandoSeSolteiroComandoSeSolteiro(pexpNode2, pcomandoNode3);
        }
	nodeList.add(pcomandosesolteiroNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce AComandoSeSenaoSolteiroComandoSeSolteiro */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComandoSeSolteiro pcomandosesolteiroNode1;
        {
            // Block
        PExp pexpNode2;
        PComandoSeCasado pcomandosecasadoNode3;
        PComandoSeSolteiro pcomandosesolteiroNode4;
        pexpNode2 = (PExp)nodeArrayList3.get(0);
        pcomandosecasadoNode3 = (PComandoSeCasado)nodeArrayList5.get(0);
        pcomandosesolteiroNode4 = (PComandoSeSolteiro)nodeArrayList7.get(0);

        pcomandosesolteiroNode1 = new AComandoSeSenaoSolteiroComandoSeSolteiro(pexpNode2, pcomandosecasadoNode3, pcomandosesolteiroNode4);
        }
	nodeList.add(pcomandosesolteiroNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce AEnquantoComandoComandoSeSolteiro */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComandoSeSolteiro pcomandosesolteiroNode1;
        {
            // Block
        PExp pexpNode2;
        PComandoSeSolteiro pcomandosesolteiroNode3;
        pexpNode2 = (PExp)nodeArrayList3.get(0);
        pcomandosesolteiroNode3 = (PComandoSeSolteiro)nodeArrayList5.get(0);

        pcomandosesolteiroNode1 = new AEnquantoComandoComandoSeSolteiro(pexpNode2, pcomandosesolteiroNode3);
        }
	nodeList.add(pcomandosesolteiroNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce AComandoSeSenaoCasadoComandoSeCasado */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComandoSeCasado pcomandosecasadoNode1;
        {
            // Block
        PExp pexpNode2;
        PComandoSeCasado pcomandosecasadoNode3;
        PComandoSeCasado pcomandosecasadoNode4;
        pexpNode2 = (PExp)nodeArrayList3.get(0);
        pcomandosecasadoNode3 = (PComandoSeCasado)nodeArrayList5.get(0);
        pcomandosecasadoNode4 = (PComandoSeCasado)nodeArrayList7.get(0);

        pcomandosecasadoNode1 = new AComandoSeSenaoCasadoComandoSeCasado(pexpNode2, pcomandosecasadoNode3, pcomandosecasadoNode4);
        }
	nodeList.add(pcomandosecasadoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce AEnquantoComandoComandoSeCasado */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComandoSeCasado pcomandosecasadoNode1;
        {
            // Block
        PExp pexpNode2;
        PComandoSeCasado pcomandosecasadoNode3;
        pexpNode2 = (PExp)nodeArrayList3.get(0);
        pcomandosecasadoNode3 = (PComandoSeCasado)nodeArrayList5.get(0);

        pcomandosecasadoNode1 = new AEnquantoComandoComandoSeCasado(pexpNode2, pcomandosecasadoNode3);
        }
	nodeList.add(pcomandosecasadoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce AIdAtribuicaoComandoComandoSeCasado */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComandoSeCasado pcomandosecasadoNode1;
        {
            // Block
        PIdAtribuicao pidatribuicaoNode2;
        pidatribuicaoNode2 = (PIdAtribuicao)nodeArrayList1.get(0);

        pcomandosecasadoNode1 = new AIdAtribuicaoComandoComandoSeCasado(pidatribuicaoNode2);
        }
	nodeList.add(pcomandosecasadoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce AChamadaProcedimentoComandoComandoSeCasado */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComandoSeCasado pcomandosecasadoNode1;
        {
            // Block
        PChamadaProcedimento pchamadaprocedimentoNode2;
        pchamadaprocedimentoNode2 = (PChamadaProcedimento)nodeArrayList1.get(0);

        pcomandosecasadoNode1 = new AChamadaProcedimentoComandoComandoSeCasado(pchamadaprocedimentoNode2);
        }
	nodeList.add(pcomandosecasadoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce ABlocoComandosComandoSeCasado */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComandoSeCasado pcomandosecasadoNode1;
        {
            // Block
        PBlocoComandos pblococomandosNode2;
        pblococomandosNode2 = (PBlocoComandos)nodeArrayList1.get(0);

        pcomandosecasadoNode1 = new ABlocoComandosComandoSeCasado(pblococomandosNode2);
        }
	nodeList.add(pcomandosecasadoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce AComandoSeCasadoComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PComandoSeCasado pcomandosecasadoNode2;
        pcomandosecasadoNode2 = (PComandoSeCasado)nodeArrayList1.get(0);

        pcomandoNode1 = new AComandoSeCasadoComando(pcomandosecasadoNode2);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce AComandoSeSolteiroComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PComandoSeSolteiro pcomandosesolteiroNode2;
        pcomandosesolteiroNode2 = (PComandoSeSolteiro)nodeArrayList1.get(0);

        pcomandoNode1 = new AComandoSeSolteiroComando(pcomandosesolteiroNode2);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce AAblococomandosblococomandos1BlocoComandos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBlocoComandos pblococomandosNode1;
        {
            // Block
        TInicioBloco tinicioblocoNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        TFimBloco tfimblocoNode5;
        tinicioblocoNode2 = (TInicioBloco)nodeArrayList1.get(0);
        {
            // Block
        }
        {
            // Block
        }
        tfimblocoNode5 = (TFimBloco)nodeArrayList2.get(0);

        pblococomandosNode1 = new ABlocoComandosBlocoComandos(tinicioblocoNode2, listNode3, listNode4, tfimblocoNode5);
        }
	nodeList.add(pblococomandosNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce AAblococomandosblococomandos2BlocoComandos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBlocoComandos pblococomandosNode1;
        {
            // Block
        TInicioBloco tinicioblocoNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        TFimBloco tfimblocoNode6;
        tinicioblocoNode2 = (TInicioBloco)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        {
            // Block
        }
        tfimblocoNode6 = (TFimBloco)nodeArrayList3.get(0);

        pblococomandosNode1 = new ABlocoComandosBlocoComandos(tinicioblocoNode2, listNode4, listNode5, tfimblocoNode6);
        }
	nodeList.add(pblococomandosNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce AAblococomandosblococomandos3BlocoComandos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBlocoComandos pblococomandosNode1;
        {
            // Block
        TInicioBloco tinicioblocoNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        TFimBloco tfimblocoNode6;
        tinicioblocoNode2 = (TInicioBloco)nodeArrayList1.get(0);
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList2.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        tfimblocoNode6 = (TFimBloco)nodeArrayList3.get(0);

        pblococomandosNode1 = new ABlocoComandosBlocoComandos(tinicioblocoNode2, listNode3, listNode5, tfimblocoNode6);
        }
	nodeList.add(pblococomandosNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce AAblococomandosblococomandos4BlocoComandos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBlocoComandos pblococomandosNode1;
        {
            // Block
        TInicioBloco tinicioblocoNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        TFimBloco tfimblocoNode7;
        tinicioblocoNode2 = (TInicioBloco)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList3.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        tfimblocoNode7 = (TFimBloco)nodeArrayList4.get(0);

        pblococomandosNode1 = new ABlocoComandosBlocoComandos(tinicioblocoNode2, listNode4, listNode6, tfimblocoNode7);
        }
	nodeList.add(pblococomandosNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce AValorValor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValor pvalorNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        pvalorNode1 = new AValorValor(tidNode2);
        }
	nodeList.add(pvalorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce AValorArrayValor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValor pvalorNode1;
        {
            // Block
        PValor pvalorNode2;
        PExp pexpNode3;
        pvalorNode2 = (PValor)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pvalorNode1 = new AValorArrayValor(pvalorNode2, pexpNode3);
        }
	nodeList.add(pvalorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce AAblocoexpressoesblocoexpressoes1BlocoExpressoes */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        PExp pexpNode3;
        {
            // Block
        }
        pexpNode3 = (PExp)nodeArrayList2.get(0);

        pexpNode1 = new ABlocoExpressoesExp(listNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce AAblocoexpressoesblocoexpressoes2BlocoExpressoes */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PExp pexpNode4;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        pexpNode4 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new ABlocoExpressoesExp(listNode3, pexpNode4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce AChamadaFuncaoChamadaFuncao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TId tidNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        tidNode2 = (TId)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList3.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pexpNode1 = new AChamadaFuncaoExp(tidNode2, listNode4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce AChamadaProcedimentoChamadaProcedimento */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PChamadaProcedimento pchamadaprocedimentoNode1;
        {
            // Block
        TId tidNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        tidNode2 = (TId)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList3.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pchamadaprocedimentoNode1 = new AChamadaChamadaProcedimento(tidNode2, listNode4);
        }
	nodeList.add(pchamadaprocedimentoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce ATernarioListaExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	if(pexpNode1 != null)
	{
	  listNode2.add(pexpNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce AListaExpListaExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        PExp pexpNode1;
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        pexpNode1 = (PExp)nodeArrayList1.get(0);
        listNode2 = (LinkedList)nodeArrayList3.get(0);
	if(pexpNode1 != null)
	{
	  listNode3.add(pexpNode1);
	}
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce AVazioListaExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PExp pexpNode1;
        {
            // Block

        pexpNode1 = new AVazioExp();
        }
	if(pexpNode1 != null)
	{
	  listNode2.add(pexpNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce AExpTernario */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce ATernarioTernario */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        PExp pexpNode4;
        pexpNode2 = (PExp)nodeArrayList3.get(0);
        pexpNode3 = (PExp)nodeArrayList5.get(0);
        pexpNode4 = (PExp)nodeArrayList7.get(0);

        pexpNode1 = new ATernarioExp(pexpNode2, pexpNode3, pexpNode4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce APrio1Exp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce ACompOuExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AOuExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce APrio2Prio1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce ACompEPrio1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AEExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce APrio3Prio2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce AIgualPrio2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AIgualExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new58() /* reduce APrio4Prio3 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new59() /* reduce AMaiorIgualPrio3 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AMaiorIgualExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new60() /* reduce AMaiorPrio3 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AMaiorExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new61() /* reduce APrio5Prio4 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new62() /* reduce ASomaPrio4 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new ASomaExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new63() /* reduce AMenosPrio4 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AMenosExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new64() /* reduce APrio6Prio5 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new65() /* reduce AMultPrio5 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AMultExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new66() /* reduce ADivPrio5 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new ADivExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new67() /* reduce AModPrio5 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PExp pexpNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AModExp(pexpNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new68() /* reduce APrio7Prio6 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new69() /* reduce ANegacaoPrio6 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList2.get(0);

        pexpNode1 = new ANegacaoExp(pexpNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new70() /* reduce ANegativoPrio6 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList2.get(0);

        pexpNode1 = new ANegativoExp(pexpNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new71() /* reduce ANumeroIntPrio7 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TNumeroInt tnumerointNode2;
        tnumerointNode2 = (TNumeroInt)nodeArrayList1.get(0);

        pexpNode1 = new ANumeroIntExp(tnumerointNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new72() /* reduce ANumeroRealPrio7 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TNumeroReal tnumerorealNode2;
        tnumerorealNode2 = (TNumeroReal)nodeArrayList1.get(0);

        pexpNode1 = new ANumeroRealExp(tnumerorealNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new73() /* reduce ACadeiaPrio7 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TCadeia tcadeiaNode2;
        tcadeiaNode2 = (TCadeia)nodeArrayList1.get(0);

        pexpNode1 = new ACadeiaExp(tcadeiaNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new74() /* reduce AVerdadePrio7 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TVerdade tverdadeNode2;
        tverdadeNode2 = (TVerdade)nodeArrayList1.get(0);

        pexpNode1 = new AVerdadeExp(tverdadeNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new75() /* reduce AFalsoPrio7 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TFalso tfalsoNode2;
        tfalsoNode2 = (TFalso)nodeArrayList1.get(0);

        pexpNode1 = new AFalsoExp(tfalsoNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new76() /* reduce AValorPrio7 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PValor pvalorNode2;
        pvalorNode2 = (PValor)nodeArrayList1.get(0);

        pexpNode1 = new AValorExp(pvalorNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new77() /* reduce AChamadaFuncaoPrio7 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new78() /* reduce ABlocoExpressoesPrio7 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new79() /* reduce AArrayCompPrio7 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new80() /* reduce AParPrio7 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList2.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new81() /* reduce ATerminal$ProgramaDir */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PProgramaDir pprogramadirNode1;
        pprogramadirNode1 = (PProgramaDir)nodeArrayList1.get(0);
	if(pprogramadirNode1 != null)
	{
	  listNode2.add(pprogramadirNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new82() /* reduce ANonTerminal$ProgramaDir */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PProgramaDir pprogramadirNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pprogramadirNode2 = (PProgramaDir)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pprogramadirNode2 != null)
	{
	  listNode3.add(pprogramadirNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new83() /* reduce ATerminal$ProgramaEsq */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PProgramaEsq pprogramaesqNode1;
        pprogramaesqNode1 = (PProgramaEsq)nodeArrayList1.get(0);
	if(pprogramaesqNode1 != null)
	{
	  listNode2.add(pprogramaesqNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new84() /* reduce ANonTerminal$ProgramaEsq */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PProgramaEsq pprogramaesqNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pprogramaesqNode2 = (PProgramaEsq)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pprogramaesqNode2 != null)
	{
	  listNode3.add(pprogramaesqNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new85() /* reduce ATerminal$BarraParametro */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PBarraParametro pbarraparametroNode1;
        pbarraparametroNode1 = (PBarraParametro)nodeArrayList1.get(0);
	if(pbarraparametroNode1 != null)
	{
	  listNode2.add(pbarraparametroNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new86() /* reduce ANonTerminal$BarraParametro */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PBarraParametro pbarraparametroNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pbarraparametroNode2 = (PBarraParametro)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pbarraparametroNode2 != null)
	{
	  listNode3.add(pbarraparametroNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new87() /* reduce ATerminal$Comando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PComando pcomandoNode1;
        pcomandoNode1 = (PComando)nodeArrayList1.get(0);
	if(pcomandoNode1 != null)
	{
	  listNode2.add(pcomandoNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new88() /* reduce ANonTerminal$Comando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PComando pcomandoNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pcomandoNode2 = (PComando)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pcomandoNode2 != null)
	{
	  listNode3.add(pcomandoNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new89() /* reduce ATerminal$ProdDeclConst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PProdDeclConst pproddeclconstNode1;
        pproddeclconstNode1 = (PProdDeclConst)nodeArrayList1.get(0);
	if(pproddeclconstNode1 != null)
	{
	  listNode2.add(pproddeclconstNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new90() /* reduce ANonTerminal$ProdDeclConst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PProdDeclConst pproddeclconstNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pproddeclconstNode2 = (PProdDeclConst)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pproddeclconstNode2 != null)
	{
	  listNode3.add(pproddeclconstNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {3, SHIFT, 1}, {4, SHIFT, 2}, {5, SHIFT, 3}, {6, SHIFT, 4}, {23, SHIFT, 5}, },
			{{-1, ERROR, 1}, {25, SHIFT, 15}, },
			{{-1, ERROR, 2}, {25, SHIFT, 16}, },
			{{-1, ERROR, 3}, {25, SHIFT, 17}, },
			{{-1, ERROR, 4}, {25, SHIFT, 18}, },
			{{-1, ERROR, 5}, {5, SHIFT, 19}, },
			{{-1, ERROR, 6}, {42, ACCEPT, -1}, },
			{{-1, REDUCE, 83}, },
			{{-1, REDUCE, 81}, },
			{{-1, REDUCE, 2}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 4}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 0}, {5, SHIFT, 3}, {6, SHIFT, 4}, {23, SHIFT, 5}, },
			{{-1, ERROR, 14}, {3, SHIFT, 1}, {4, SHIFT, 2}, {5, SHIFT, 3}, {6, SHIFT, 4}, {23, SHIFT, 5}, },
			{{-1, ERROR, 15}, {10, SHIFT, 23}, {11, SHIFT, 24}, {12, SHIFT, 25}, {13, SHIFT, 26}, },
			{{-1, ERROR, 16}, {10, SHIFT, 23}, {11, SHIFT, 24}, {12, SHIFT, 25}, {13, SHIFT, 26}, },
			{{-1, ERROR, 17}, {41, SHIFT, 30}, },
			{{-1, ERROR, 18}, {10, SHIFT, 23}, {11, SHIFT, 24}, {12, SHIFT, 25}, {13, SHIFT, 26}, },
			{{-1, ERROR, 19}, {25, SHIFT, 32}, },
			{{-1, REDUCE, 82}, },
			{{-1, REDUCE, 84}, },
			{{-1, REDUCE, 1}, {5, SHIFT, 3}, {6, SHIFT, 4}, {23, SHIFT, 5}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 15}, },
			{{-1, REDUCE, 16}, },
			{{-1, ERROR, 27}, {18, SHIFT, 33}, {41, SHIFT, 34}, },
			{{-1, REDUCE, 11}, },
			{{-1, ERROR, 29}, {18, SHIFT, 33}, {41, SHIFT, 37}, },
			{{-1, ERROR, 30}, {16, SHIFT, 39}, },
			{{-1, ERROR, 31}, {18, SHIFT, 33}, {41, SHIFT, 40}, },
			{{-1, ERROR, 32}, {41, SHIFT, 41}, },
			{{-1, ERROR, 33}, {0, SHIFT, 42}, {1, SHIFT, 43}, {7, SHIFT, 44}, {14, SHIFT, 45}, {16, SHIFT, 46}, {18, SHIFT, 47}, {30, SHIFT, 48}, {34, SHIFT, 49}, {38, SHIFT, 50}, {39, SHIFT, 51}, {40, SHIFT, 52}, {41, SHIFT, 53}, },
			{{-1, REDUCE, 41}, {26, SHIFT, 67}, },
			{{-1, ERROR, 35}, {26, SHIFT, 68}, },
			{{-1, ERROR, 36}, {18, SHIFT, 69}, {22, SHIFT, 70}, },
			{{-1, REDUCE, 41}, },
			{{-1, ERROR, 38}, {26, SHIFT, 71}, },
			{{-1, REDUCE, 22}, {10, SHIFT, 23}, {11, SHIFT, 24}, {12, SHIFT, 25}, {13, SHIFT, 26}, },
			{{-1, ERROR, 40}, {16, SHIFT, 76}, },
			{{-1, ERROR, 41}, {16, SHIFT, 77}, },
			{{-1, REDUCE, 71}, },
			{{-1, REDUCE, 72}, },
			{{-1, ERROR, 44}, {16, SHIFT, 78}, },
			{{-1, ERROR, 45}, {0, SHIFT, 42}, {1, SHIFT, 43}, {4, SHIFT, 2}, {7, SHIFT, 44}, {14, SHIFT, 45}, {16, SHIFT, 46}, {18, SHIFT, 47}, {30, SHIFT, 48}, {34, SHIFT, 49}, {38, SHIFT, 50}, {39, SHIFT, 51}, {40, SHIFT, 52}, {41, SHIFT, 53}, },
			{{-1, ERROR, 46}, {0, SHIFT, 42}, {1, SHIFT, 43}, {7, SHIFT, 44}, {14, SHIFT, 45}, {16, SHIFT, 46}, {18, SHIFT, 47}, {30, SHIFT, 48}, {34, SHIFT, 49}, {38, SHIFT, 50}, {39, SHIFT, 51}, {40, SHIFT, 52}, {41, SHIFT, 53}, },
			{{-1, ERROR, 47}, {41, SHIFT, 83}, },
			{{-1, ERROR, 48}, {0, SHIFT, 42}, {1, SHIFT, 43}, {14, SHIFT, 45}, {16, SHIFT, 46}, {18, SHIFT, 47}, {38, SHIFT, 50}, {39, SHIFT, 51}, {40, SHIFT, 52}, {41, SHIFT, 53}, },
			{{-1, ERROR, 49}, {0, SHIFT, 42}, {1, SHIFT, 43}, {14, SHIFT, 45}, {16, SHIFT, 46}, {18, SHIFT, 47}, {38, SHIFT, 50}, {39, SHIFT, 51}, {40, SHIFT, 52}, {41, SHIFT, 53}, },
			{{-1, REDUCE, 74}, },
			{{-1, REDUCE, 75}, },
			{{-1, REDUCE, 73}, },
			{{-1, REDUCE, 41}, {16, SHIFT, 86}, },
			{{-1, REDUCE, 79}, },
			{{-1, REDUCE, 76}, {18, SHIFT, 69}, },
			{{-1, REDUCE, 78}, },
			{{-1, REDUCE, 77}, },
			{{-1, ERROR, 58}, {19, SHIFT, 87}, },
			{{-1, REDUCE, 50}, {32, SHIFT, 88}, },
			{{-1, REDUCE, 52}, {31, SHIFT, 89}, },
			{{-1, REDUCE, 54}, {27, SHIFT, 90}, },
			{{-1, REDUCE, 56}, {28, SHIFT, 91}, {29, SHIFT, 92}, },
			{{-1, REDUCE, 58}, {33, SHIFT, 93}, {34, SHIFT, 94}, },
			{{-1, REDUCE, 61}, {35, SHIFT, 95}, {36, SHIFT, 96}, {37, SHIFT, 97}, },
			{{-1, REDUCE, 64}, },
			{{-1, REDUCE, 68}, },
			{{-1, REDUCE, 6}, },
			{{-1, REDUCE, 7}, },
			{{-1, ERROR, 69}, {0, SHIFT, 42}, {1, SHIFT, 43}, {7, SHIFT, 44}, {14, SHIFT, 45}, {16, SHIFT, 46}, {18, SHIFT, 47}, {30, SHIFT, 48}, {34, SHIFT, 49}, {38, SHIFT, 50}, {39, SHIFT, 51}, {40, SHIFT, 52}, {41, SHIFT, 53}, },
			{{-1, ERROR, 70}, {0, SHIFT, 42}, {1, SHIFT, 43}, {7, SHIFT, 44}, {14, SHIFT, 45}, {16, SHIFT, 46}, {18, SHIFT, 47}, {30, SHIFT, 48}, {34, SHIFT, 49}, {38, SHIFT, 50}, {39, SHIFT, 51}, {40, SHIFT, 52}, {41, SHIFT, 53}, },
			{{-1, REDUCE, 8}, },
			{{-1, REDUCE, 25}, },
			{{-1, ERROR, 73}, {17, SHIFT, 100}, },
			{{-1, REDUCE, 20}, {24, SHIFT, 101}, },
			{{-1, ERROR, 75}, {18, SHIFT, 104}, {41, SHIFT, 105}, },
			{{-1, REDUCE, 22}, {10, SHIFT, 23}, {11, SHIFT, 24}, {12, SHIFT, 25}, {13, SHIFT, 26}, },
			{{-1, REDUCE, 22}, {10, SHIFT, 23}, {11, SHIFT, 24}, {12, SHIFT, 25}, {13, SHIFT, 26}, },
			{{-1, ERROR, 78}, {0, SHIFT, 42}, {1, SHIFT, 43}, {14, SHIFT, 45}, {16, SHIFT, 46}, {18, SHIFT, 47}, {30, SHIFT, 48}, {34, SHIFT, 49}, {38, SHIFT, 50}, {39, SHIFT, 51}, {40, SHIFT, 52}, {41, SHIFT, 53}, },
			{{-1, REDUCE, 89}, },
			{{-1, ERROR, 80}, {15, SHIFT, 109}, },
			{{-1, ERROR, 81}, {0, SHIFT, 42}, {1, SHIFT, 43}, {4, SHIFT, 2}, {7, SHIFT, 44}, {14, SHIFT, 45}, {16, SHIFT, 46}, {18, SHIFT, 47}, {30, SHIFT, 48}, {34, SHIFT, 49}, {38, SHIFT, 50}, {39, SHIFT, 51}, {40, SHIFT, 52}, {41, SHIFT, 53}, },
			{{-1, ERROR, 82}, {17, SHIFT, 112}, },
			{{-1, ERROR, 83}, {24, SHIFT, 113}, },
			{{-1, REDUCE, 69}, },
			{{-1, REDUCE, 70}, },
			{{-1, REDUCE, 49}, {0, SHIFT, 42}, {1, SHIFT, 43}, {7, SHIFT, 44}, {14, SHIFT, 45}, {16, SHIFT, 46}, {18, SHIFT, 47}, {30, SHIFT, 48}, {34, SHIFT, 49}, {38, SHIFT, 50}, {39, SHIFT, 51}, {40, SHIFT, 52}, {41, SHIFT, 53}, },
			{{-1, REDUCE, 12}, },
			{{-1, ERROR, 88}, {0, SHIFT, 42}, {1, SHIFT, 43}, {14, SHIFT, 45}, {16, SHIFT, 46}, {18, SHIFT, 47}, {30, SHIFT, 48}, {34, SHIFT, 49}, {38, SHIFT, 50}, {39, SHIFT, 51}, {40, SHIFT, 52}, {41, SHIFT, 53}, },
			{{-1, ERROR, 89}, {0, SHIFT, 42}, {1, SHIFT, 43}, {14, SHIFT, 45}, {16, SHIFT, 46}, {18, SHIFT, 47}, {30, SHIFT, 48}, {34, SHIFT, 49}, {38, SHIFT, 50}, {39, SHIFT, 51}, {40, SHIFT, 52}, {41, SHIFT, 53}, },
			{{-1, ERROR, 90}, {0, SHIFT, 42}, {1, SHIFT, 43}, {14, SHIFT, 45}, {16, SHIFT, 46}, {18, SHIFT, 47}, {30, SHIFT, 48}, {34, SHIFT, 49}, {38, SHIFT, 50}, {39, SHIFT, 51}, {40, SHIFT, 52}, {41, SHIFT, 53}, },
			{{-1, ERROR, 91}, {0, SHIFT, 42}, {1, SHIFT, 43}, {14, SHIFT, 45}, {16, SHIFT, 46}, {18, SHIFT, 47}, {30, SHIFT, 48}, {34, SHIFT, 49}, {38, SHIFT, 50}, {39, SHIFT, 51}, {40, SHIFT, 52}, {41, SHIFT, 53}, },
			{{-1, ERROR, 92}, {0, SHIFT, 42}, {1, SHIFT, 43}, {14, SHIFT, 45}, {16, SHIFT, 46}, {18, SHIFT, 47}, {30, SHIFT, 48}, {34, SHIFT, 49}, {38, SHIFT, 50}, {39, SHIFT, 51}, {40, SHIFT, 52}, {41, SHIFT, 53}, },
			{{-1, ERROR, 93}, {0, SHIFT, 42}, {1, SHIFT, 43}, {14, SHIFT, 45}, {16, SHIFT, 46}, {18, SHIFT, 47}, {30, SHIFT, 48}, {34, SHIFT, 49}, {38, SHIFT, 50}, {39, SHIFT, 51}, {40, SHIFT, 52}, {41, SHIFT, 53}, },
			{{-1, ERROR, 94}, {0, SHIFT, 42}, {1, SHIFT, 43}, {14, SHIFT, 45}, {16, SHIFT, 46}, {18, SHIFT, 47}, {30, SHIFT, 48}, {34, SHIFT, 49}, {38, SHIFT, 50}, {39, SHIFT, 51}, {40, SHIFT, 52}, {41, SHIFT, 53}, },
			{{-1, ERROR, 95}, {0, SHIFT, 42}, {1, SHIFT, 43}, {14, SHIFT, 45}, {16, SHIFT, 46}, {18, SHIFT, 47}, {30, SHIFT, 48}, {34, SHIFT, 49}, {38, SHIFT, 50}, {39, SHIFT, 51}, {40, SHIFT, 52}, {41, SHIFT, 53}, },
			{{-1, ERROR, 96}, {0, SHIFT, 42}, {1, SHIFT, 43}, {14, SHIFT, 45}, {16, SHIFT, 46}, {18, SHIFT, 47}, {30, SHIFT, 48}, {34, SHIFT, 49}, {38, SHIFT, 50}, {39, SHIFT, 51}, {40, SHIFT, 52}, {41, SHIFT, 53}, },
			{{-1, ERROR, 97}, {0, SHIFT, 42}, {1, SHIFT, 43}, {14, SHIFT, 45}, {16, SHIFT, 46}, {18, SHIFT, 47}, {30, SHIFT, 48}, {34, SHIFT, 49}, {38, SHIFT, 50}, {39, SHIFT, 51}, {40, SHIFT, 52}, {41, SHIFT, 53}, },
			{{-1, ERROR, 98}, {19, SHIFT, 126}, },
			{{-1, REDUCE, 9}, },
			{{-1, ERROR, 100}, {7, SHIFT, 127}, {9, SHIFT, 128}, {14, SHIFT, 129}, {41, SHIFT, 130}, },
			{{-1, ERROR, 101}, {10, SHIFT, 23}, {11, SHIFT, 24}, {12, SHIFT, 25}, {13, SHIFT, 26}, },
			{{-1, REDUCE, 85}, },
			{{-1, REDUCE, 21}, {24, SHIFT, 101}, },
			{{-1, ERROR, 104}, {19, SHIFT, 139}, },
			{{-1, REDUCE, 24}, },
			{{-1, ERROR, 106}, {17, SHIFT, 140}, },
			{{-1, ERROR, 107}, {17, SHIFT, 141}, },
			{{-1, ERROR, 108}, {17, SHIFT, 142}, {32, SHIFT, 88}, },
			{{-1, REDUCE, 43}, },
			{{-1, REDUCE, 90}, },
			{{-1, ERROR, 111}, {15, SHIFT, 143}, },
			{{-1, REDUCE, 80}, },
			{{-1, ERROR, 113}, {0, SHIFT, 42}, {1, SHIFT, 43}, {7, SHIFT, 44}, {14, SHIFT, 45}, {16, SHIFT, 46}, {18, SHIFT, 47}, {30, SHIFT, 48}, {34, SHIFT, 49}, {38, SHIFT, 50}, {39, SHIFT, 51}, {40, SHIFT, 52}, {41, SHIFT, 53}, },
			{{-1, ERROR, 114}, {17, SHIFT, 145}, },
			{{-1, REDUCE, 47}, {24, SHIFT, 146}, },
			{{-1, REDUCE, 53}, {31, SHIFT, 89}, },
			{{-1, REDUCE, 55}, {27, SHIFT, 90}, },
			{{-1, REDUCE, 57}, {28, SHIFT, 91}, {29, SHIFT, 92}, },
			{{-1, REDUCE, 59}, {33, SHIFT, 93}, {34, SHIFT, 94}, },
			{{-1, REDUCE, 60}, {33, SHIFT, 93}, {34, SHIFT, 94}, },
			{{-1, REDUCE, 62}, {35, SHIFT, 95}, {36, SHIFT, 96}, {37, SHIFT, 97}, },
			{{-1, REDUCE, 63}, {35, SHIFT, 95}, {36, SHIFT, 96}, {37, SHIFT, 97}, },
			{{-1, REDUCE, 65}, },
			{{-1, REDUCE, 66}, },
			{{-1, REDUCE, 67}, },
			{{-1, REDUCE, 42}, },
			{{-1, ERROR, 127}, {16, SHIFT, 147}, },
			{{-1, ERROR, 128}, {16, SHIFT, 148}, },
			{{-1, ERROR, 129}, {3, SHIFT, 1}, {4, SHIFT, 2}, {7, SHIFT, 127}, {9, SHIFT, 128}, {14, SHIFT, 129}, {15, SHIFT, 149}, {41, SHIFT, 130}, },
			{{-1, REDUCE, 41}, {16, SHIFT, 153}, },
			{{-1, ERROR, 131}, {26, SHIFT, 154}, },
			{{-1, REDUCE, 36}, },
			{{-1, REDUCE, 35}, },
			{{-1, REDUCE, 17}, },
			{{-1, REDUCE, 34}, },
			{{-1, ERROR, 136}, {26, SHIFT, 155}, },
			{{-1, REDUCE, 23}, },
			{{-1, REDUCE, 86}, },
			{{-1, REDUCE, 26}, },
			{{-1, ERROR, 140}, {0, SHIFT, 42}, {1, SHIFT, 43}, {7, SHIFT, 44}, {14, SHIFT, 45}, {16, SHIFT, 46}, {18, SHIFT, 47}, {30, SHIFT, 48}, {34, SHIFT, 49}, {38, SHIFT, 50}, {39, SHIFT, 51}, {40, SHIFT, 52}, {41, SHIFT, 53}, },
			{{-1, ERROR, 141}, {7, SHIFT, 127}, {9, SHIFT, 128}, {14, SHIFT, 129}, {41, SHIFT, 130}, },
			{{-1, ERROR, 142}, {0, SHIFT, 42}, {1, SHIFT, 43}, {7, SHIFT, 44}, {14, SHIFT, 45}, {16, SHIFT, 46}, {18, SHIFT, 47}, {30, SHIFT, 48}, {34, SHIFT, 49}, {38, SHIFT, 50}, {39, SHIFT, 51}, {40, SHIFT, 52}, {41, SHIFT, 53}, },
			{{-1, REDUCE, 44}, },
			{{-1, ERROR, 144}, {19, SHIFT, 159}, },
			{{-1, REDUCE, 45}, },
			{{-1, REDUCE, 49}, {0, SHIFT, 42}, {1, SHIFT, 43}, {7, SHIFT, 44}, {14, SHIFT, 45}, {16, SHIFT, 46}, {18, SHIFT, 47}, {30, SHIFT, 48}, {34, SHIFT, 49}, {38, SHIFT, 50}, {39, SHIFT, 51}, {40, SHIFT, 52}, {41, SHIFT, 53}, },
			{{-1, ERROR, 147}, {0, SHIFT, 42}, {1, SHIFT, 43}, {7, SHIFT, 44}, {14, SHIFT, 45}, {16, SHIFT, 46}, {18, SHIFT, 47}, {30, SHIFT, 48}, {34, SHIFT, 49}, {38, SHIFT, 50}, {39, SHIFT, 51}, {40, SHIFT, 52}, {41, SHIFT, 53}, },
			{{-1, ERROR, 148}, {0, SHIFT, 42}, {1, SHIFT, 43}, {7, SHIFT, 44}, {14, SHIFT, 45}, {16, SHIFT, 46}, {18, SHIFT, 47}, {30, SHIFT, 48}, {34, SHIFT, 49}, {38, SHIFT, 50}, {39, SHIFT, 51}, {40, SHIFT, 52}, {41, SHIFT, 53}, },
			{{-1, REDUCE, 37}, },
			{{-1, REDUCE, 87}, },
			{{-1, ERROR, 151}, {3, SHIFT, 1}, {4, SHIFT, 2}, {7, SHIFT, 127}, {9, SHIFT, 128}, {14, SHIFT, 129}, {15, SHIFT, 163}, {41, SHIFT, 130}, },
			{{-1, ERROR, 152}, {7, SHIFT, 127}, {9, SHIFT, 128}, {14, SHIFT, 129}, {15, SHIFT, 165}, {41, SHIFT, 130}, },
			{{-1, REDUCE, 49}, {0, SHIFT, 42}, {1, SHIFT, 43}, {7, SHIFT, 44}, {14, SHIFT, 45}, {16, SHIFT, 46}, {18, SHIFT, 47}, {30, SHIFT, 48}, {34, SHIFT, 49}, {38, SHIFT, 50}, {39, SHIFT, 51}, {40, SHIFT, 52}, {41, SHIFT, 53}, },
			{{-1, REDUCE, 32}, },
			{{-1, REDUCE, 33}, },
			{{-1, REDUCE, 19}, },
			{{-1, REDUCE, 18}, },
			{{-1, ERROR, 158}, {8, SHIFT, 168}, },
			{{-1, REDUCE, 10}, },
			{{-1, REDUCE, 48}, },
			{{-1, ERROR, 161}, {17, SHIFT, 169}, },
			{{-1, ERROR, 162}, {17, SHIFT, 170}, },
			{{-1, REDUCE, 38}, },
			{{-1, ERROR, 164}, {7, SHIFT, 127}, {9, SHIFT, 128}, {14, SHIFT, 129}, {15, SHIFT, 171}, {41, SHIFT, 130}, },
			{{-1, REDUCE, 39}, },
			{{-1, REDUCE, 88}, },
			{{-1, ERROR, 167}, {17, SHIFT, 172}, },
			{{-1, ERROR, 168}, {0, SHIFT, 42}, {1, SHIFT, 43}, {7, SHIFT, 44}, {14, SHIFT, 45}, {16, SHIFT, 46}, {18, SHIFT, 47}, {30, SHIFT, 48}, {34, SHIFT, 49}, {38, SHIFT, 50}, {39, SHIFT, 51}, {40, SHIFT, 52}, {41, SHIFT, 53}, },
			{{-1, ERROR, 169}, {7, SHIFT, 127}, {9, SHIFT, 128}, {14, SHIFT, 129}, {41, SHIFT, 130}, },
			{{-1, ERROR, 170}, {7, SHIFT, 127}, {9, SHIFT, 128}, {14, SHIFT, 129}, {41, SHIFT, 130}, },
			{{-1, REDUCE, 40}, },
			{{-1, REDUCE, 46}, },
			{{-1, REDUCE, 51}, },
			{{-1, REDUCE, 35}, {8, SHIFT, 178}, },
			{{-1, REDUCE, 27}, },
			{{-1, REDUCE, 29}, },
			{{-1, REDUCE, 31}, },
			{{-1, ERROR, 178}, {7, SHIFT, 127}, {9, SHIFT, 128}, {14, SHIFT, 129}, {41, SHIFT, 130}, },
			{{-1, REDUCE, 28}, },
			{{-1, REDUCE, 30}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 6}, },
			{{-1, 7}, {14, 21}, {151, 21}, },
			{{-1, 8}, {13, 20}, {22, 20}, },
			{{-1, 9}, },
			{{-1, 10}, {45, 79}, {81, 110}, },
			{{-1, 131}, {27, 35}, {29, 38}, },
			{{-1, 54}, },
			{{-1, 27}, {16, 29}, {18, 31}, },
			{{-1, 72}, {15, 28}, {16, 28}, {18, 28}, },
			{{-1, 11}, },
			{{-1, 12}, },
			{{-1, 73}, {76, 106}, {77, 107}, },
			{{-1, 102}, {103, 138}, },
			{{-1, 74}, {101, 137}, },
			{{-1, 75}, },
			{{-1, 132}, {170, 176}, {178, 179}, },
			{{-1, 133}, {169, 174}, {170, 177}, {178, 180}, },
			{{-1, 150}, {100, 134}, {141, 157}, {152, 166}, {164, 166}, {169, 175}, },
			{{-1, 135}, },
			{{-1, 55}, {27, 36}, {29, 36}, {100, 36}, {129, 36}, {141, 36}, {151, 36}, {152, 36}, {164, 36}, {169, 36}, {170, 36}, {178, 36}, },
			{{-1, 56}, },
			{{-1, 57}, },
			{{-1, 136}, },
			{{-1, 114}, {146, 160}, {153, 167}, },
			{{-1, 115}, {33, 58}, {45, 80}, {46, 82}, {69, 98}, {70, 99}, {81, 111}, {113, 144}, {140, 156}, {142, 158}, {147, 161}, {148, 162}, {168, 173}, },
			{{-1, 59}, {78, 108}, },
			{{-1, 60}, {88, 116}, },
			{{-1, 61}, {89, 117}, },
			{{-1, 62}, {90, 118}, },
			{{-1, 63}, {91, 119}, {92, 120}, },
			{{-1, 64}, {93, 121}, {94, 122}, },
			{{-1, 65}, {95, 123}, {96, 124}, {97, 125}, },
			{{-1, 66}, {48, 84}, {49, 85}, },
			{{-1, 13}, {14, 22}, },
			{{-1, 14}, {129, 151}, },
			{{-1, 103}, },
			{{-1, 152}, {151, 164}, },
			{{-1, 81}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'var', 'const', 'procedimento', 'funcao', '>>'",
			"expecting: ':'",
			"expecting: 'procedimento'",
			"expecting: EOF",
			"expecting: 'var', 'const', 'procedimento', 'funcao', 'se', 'enquanto', 'comece', 'termine', '>>', id",
			"expecting: 'procedimento', 'funcao', '>>', EOF",
			"expecting: 'inteiro', 'booleano', 'real', 'cadeia'",
			"expecting: id",
			"expecting: '[', id",
			"expecting: '('",
			"expecting: numero int, numero real, 'se', 'comece', '(', '[', 'nao', '-', 'verdade', 'falso', cadeia, id",
			"expecting: '[', '<<', ';'",
			"expecting: ';'",
			"expecting: '[', '<<'",
			"expecting: 'inteiro', 'booleano', 'real', 'cadeia', ')'",
			"expecting: 'procedimento', 'funcao', 'senao', 'termine', ')', ']', '>>', '|', ';', '=', '>=', '>', 'e', 'ou', '+', '-', '*', '/', '%', EOF",
			"expecting: numero int, numero real, 'const', 'se', 'comece', '(', '[', 'nao', '-', 'verdade', 'falso', cadeia, id",
			"expecting: numero int, numero real, 'comece', '(', '[', 'verdade', 'falso', cadeia, id",
			"expecting: 'procedimento', 'funcao', 'senao', 'termine', '(', ')', '[', ']', '>>', '|', ';', '=', '>=', '>', 'e', 'ou', '+', '-', '*', '/', '%', EOF",
			"expecting: 'procedimento', 'funcao', 'senao', 'termine', ')', '[', ']', '>>', '|', ';', '=', '>=', '>', 'e', 'ou', '+', '-', '*', '/', '%', EOF",
			"expecting: ']'",
			"expecting: 'procedimento', 'funcao', 'senao', 'termine', ')', ']', '>>', '|', ';', 'ou', EOF",
			"expecting: 'procedimento', 'funcao', 'senao', 'termine', ')', ']', '>>', '|', ';', 'e', 'ou', EOF",
			"expecting: 'procedimento', 'funcao', 'senao', 'termine', ')', ']', '>>', '|', ';', '=', 'e', 'ou', EOF",
			"expecting: 'procedimento', 'funcao', 'senao', 'termine', ')', ']', '>>', '|', ';', '=', '>=', '>', 'e', 'ou', EOF",
			"expecting: 'procedimento', 'funcao', 'senao', 'termine', ')', ']', '>>', '|', ';', '=', '>=', '>', 'e', 'ou', '+', '-', EOF",
			"expecting: numero int, numero real, 'var', 'const', 'procedimento', 'funcao', 'se', 'enquanto', 'comece', 'termine', '(', '[', '>>', 'nao', '-', 'verdade', 'falso', cadeia, id",
			"expecting: ')'",
			"expecting: ')', '|'",
			"expecting: numero int, numero real, 'comece', '(', '[', 'nao', '-', 'verdade', 'falso', cadeia, id",
			"expecting: 'termine'",
			"expecting: '|'",
			"expecting: numero int, numero real, 'se', 'comece', '(', ')', '[', 'nao', '-', 'verdade', 'falso', cadeia, id",
			"expecting: 'se', 'enquanto', 'comece', id",
			"expecting: ')', 'ou'",
			"expecting: 'procedimento', 'funcao', 'senao', 'termine', ')', '[', ']', '<<', '>>', '|', ';', '=', '>=', '>', 'e', 'ou', '+', '-', '*', '/', '%', EOF",
			"expecting: 'var', 'const', 'se', 'enquanto', 'comece', 'termine', id",
			"expecting: '(', '[', '<<'",
			"expecting: 'procedimento', 'funcao', 'se', 'enquanto', 'comece', 'termine', '>>', id, EOF",
			"expecting: 'procedimento', 'funcao', 'se', 'senao', 'enquanto', 'comece', 'termine', '>>', id, EOF",
			"expecting: 'se', 'enquanto', 'comece', 'termine', id",
			"expecting: 'senao'",
			"expecting: 'procedimento', 'funcao', 'senao', 'termine', ')', ']', '>>', '|', ';', EOF",
        };*/
    private static int[] errors;
/*      {
			0, 1, 1, 1, 1, 2, 3, 4, 5, 4, 4, 5, 5, 5, 0, 6, 6, 7, 6, 1, 5, 4, 5, 8, 8, 8, 8, 8, 8, 8, 9, 8, 7, 10, 11, 12, 13, 13, 12, 14, 9, 9, 15, 15, 9, 16, 10, 7, 17, 17, 15, 15, 15, 18, 15, 19, 15, 15, 20, 21, 22, 23, 24, 25, 15, 15, 15, 4, 4, 10, 10, 26, 8, 27, 28, 8, 14, 14, 29, 16, 30, 16, 27, 31, 15, 15, 32, 8, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 20, 12, 33, 6, 28, 28, 20, 28, 27, 27, 34, 15, 16, 30, 15, 10, 27, 28, 22, 23, 24, 25, 25, 15, 15, 15, 15, 15, 35, 9, 9, 36, 37, 12, 38, 38, 5, 39, 12, 28, 28, 8, 10, 33, 10, 15, 20, 15, 32, 10, 10, 39, 40, 36, 40, 32, 39, 39, 5, 5, 41, 15, 27, 27, 27, 39, 40, 39, 40, 27, 10, 33, 33, 39, 12, 42, 39, 38, 38, 39, 33, 38, 39, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
