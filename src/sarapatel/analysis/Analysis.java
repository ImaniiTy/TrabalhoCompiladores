/* This file was generated by SableCC (http://www.sablecc.org/). */

package sarapatel.analysis;

import sarapatel.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAProgramaEntrada(AProgramaEntrada node);
    void caseAProdDeclVarProgramaEsq(AProdDeclVarProgramaEsq node);
    void caseAProdDeclConstProgramaEsq(AProdDeclConstProgramaEsq node);
    void caseAProdDeclProcedimentoProgramaDir(AProdDeclProcedimentoProgramaDir node);
    void caseAProdDeclFuncaoProgramaDir(AProdDeclFuncaoProgramaDir node);
    void caseAVarIdProdDeclVar(AVarIdProdDeclVar node);
    void caseAVarIdAtribuicaoProdDeclVar(AVarIdAtribuicaoProdDeclVar node);
    void caseAConstanteProdDeclConst(AConstanteProdDeclConst node);
    void caseAIdAtribuicaoIdAtribuicao(AIdAtribuicaoIdAtribuicao node);
    void caseATipoBaseTipo(ATipoBaseTipo node);
    void caseATipoExpTipo(ATipoExpTipo node);
    void caseATipoInteiroTipoBase(ATipoInteiroTipoBase node);
    void caseATipoBooleanoTipoBase(ATipoBooleanoTipoBase node);
    void caseATipoRealTipoBase(ATipoRealTipoBase node);
    void caseATipoCadeiaTipoBase(ATipoCadeiaTipoBase node);
    void caseAProdDeclProcedimentoProdDeclProcedimento(AProdDeclProcedimentoProdDeclProcedimento node);
    void caseAProdDeclFuncaoProdDeclFuncao(AProdDeclFuncaoProdDeclFuncao node);
    void caseAParametroParametros(AParametroParametros node);
    void caseAVazioParametros(AVazioParametros node);
    void caseABarraParametroBarraParametro(ABarraParametroBarraParametro node);
    void caseATipoParametroParametro(ATipoParametroParametro node);
    void caseATipoBaseTipoParametro(ATipoBaseTipoParametro node);
    void caseATipoParametroTipoParametro(ATipoParametroTipoParametro node);
    void caseAComandoSeSolteiroComandoSeSolteiro(AComandoSeSolteiroComandoSeSolteiro node);
    void caseAComandoSeSenaoSolteiroComandoSeSolteiro(AComandoSeSenaoSolteiroComandoSeSolteiro node);
    void caseAEnquantoComandoComandoSeSolteiro(AEnquantoComandoComandoSeSolteiro node);
    void caseAComandoSeSenaoCasadoComandoSeCasado(AComandoSeSenaoCasadoComandoSeCasado node);
    void caseAEnquantoComandoComandoSeCasado(AEnquantoComandoComandoSeCasado node);
    void caseAIdAtribuicaoComandoComandoSeCasado(AIdAtribuicaoComandoComandoSeCasado node);
    void caseAChamadaProcedimentoComandoComandoSeCasado(AChamadaProcedimentoComandoComandoSeCasado node);
    void caseABlocoComandosComandoSeCasado(ABlocoComandosComandoSeCasado node);
    void caseAComandoSeCasadoComando(AComandoSeCasadoComando node);
    void caseAComandoSeSolteiroComando(AComandoSeSolteiroComando node);
    void caseABlocoComandosBlocoComandos(ABlocoComandosBlocoComandos node);
    void caseAValorValor(AValorValor node);
    void caseAValorArrayValor(AValorArrayValor node);
    void caseAChamadaChamadaProcedimento(AChamadaChamadaProcedimento node);
    void caseAOuExp(AOuExp node);
    void caseAEExp(AEExp node);
    void caseAIgualExp(AIgualExp node);
    void caseAMaiorIgualExp(AMaiorIgualExp node);
    void caseAMaiorExp(AMaiorExp node);
    void caseASomaExp(ASomaExp node);
    void caseAMenosExp(AMenosExp node);
    void caseAMultExp(AMultExp node);
    void caseADivExp(ADivExp node);
    void caseAModExp(AModExp node);
    void caseATernarioExp(ATernarioExp node);
    void caseANegacaoExp(ANegacaoExp node);
    void caseANegativoExp(ANegativoExp node);
    void caseANumeroIntExp(ANumeroIntExp node);
    void caseANumeroRealExp(ANumeroRealExp node);
    void caseACadeiaExp(ACadeiaExp node);
    void caseAVerdadeExp(AVerdadeExp node);
    void caseAFalsoExp(AFalsoExp node);
    void caseAValorExp(AValorExp node);
    void caseAChamadaFuncaoExp(AChamadaFuncaoExp node);
    void caseAVazioExp(AVazioExp node);
    void caseABlocoExpressoesExp(ABlocoExpressoesExp node);
    void caseAArrayCompExp(AArrayCompExp node);

    void caseTNumeroInt(TNumeroInt node);
    void caseTNumeroReal(TNumeroReal node);
    void caseTNumeroBinario(TNumeroBinario node);
    void caseTDeclVar(TDeclVar node);
    void caseTDeclConst(TDeclConst node);
    void caseTDeclProcedimento(TDeclProcedimento node);
    void caseTDeclFuncao(TDeclFuncao node);
    void caseTCmdSe(TCmdSe node);
    void caseTCmdSenao(TCmdSenao node);
    void caseTCmdEnquanto(TCmdEnquanto node);
    void caseTTipoInteiro(TTipoInteiro node);
    void caseTTipoBooleano(TTipoBooleano node);
    void caseTTipoReal(TTipoReal node);
    void caseTTipoCadeia(TTipoCadeia node);
    void caseTInicioBloco(TInicioBloco node);
    void caseTFimBloco(TFimBloco node);
    void caseTParEsq(TParEsq node);
    void caseTParDir(TParDir node);
    void caseTColEsq(TColEsq node);
    void caseTColDir(TColDir node);
    void caseTAbreComentario(TAbreComentario node);
    void caseTFechaComentario(TFechaComentario node);
    void caseTAtribuicao(TAtribuicao node);
    void caseTPartida(TPartida node);
    void caseTBarra(TBarra node);
    void caseTDoisPontos(TDoisPontos node);
    void caseTPontoVirgula(TPontoVirgula node);
    void caseTIgual(TIgual node);
    void caseTMaiorIgual(TMaiorIgual node);
    void caseTMaior(TMaior node);
    void caseTNegacao(TNegacao node);
    void caseTCompE(TCompE node);
    void caseTCompOu(TCompOu node);
    void caseTSoma(TSoma node);
    void caseTMenos(TMenos node);
    void caseTMult(TMult node);
    void caseTDiv(TDiv node);
    void caseTMod(TMod node);
    void caseTVerdade(TVerdade node);
    void caseTFalso(TFalso node);
    void caseTVazio(TVazio node);
    void caseTCadeia(TCadeia node);
    void caseTComentarioLinha(TComentarioLinha node);
    void caseTComentarioBloco(TComentarioBloco node);
    void caseTId(TId node);
    void caseEOF(EOF node);
    void caseInvalidToken(InvalidToken node);
}
