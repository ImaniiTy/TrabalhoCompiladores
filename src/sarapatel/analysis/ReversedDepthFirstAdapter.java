/* This file was generated by SableCC (http://www.sablecc.org/). */

package sarapatel.analysis;

import java.util.*;
import sarapatel.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPEntrada().apply(this);
        outStart(node);
    }

    public void inAProgramaEntrada(AProgramaEntrada node)
    {
        defaultIn(node);
    }

    public void outAProgramaEntrada(AProgramaEntrada node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProgramaEntrada(AProgramaEntrada node)
    {
        inAProgramaEntrada(node);
        {
            List<PProgramaDir> copy = new ArrayList<PProgramaDir>(node.getProgramaDir());
            Collections.reverse(copy);
            for(PProgramaDir e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PProgramaEsq> copy = new ArrayList<PProgramaEsq>(node.getProgramaEsq());
            Collections.reverse(copy);
            for(PProgramaEsq e : copy)
            {
                e.apply(this);
            }
        }
        outAProgramaEntrada(node);
    }

    public void inAProdDeclVarProgramaEsq(AProdDeclVarProgramaEsq node)
    {
        defaultIn(node);
    }

    public void outAProdDeclVarProgramaEsq(AProdDeclVarProgramaEsq node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProdDeclVarProgramaEsq(AProdDeclVarProgramaEsq node)
    {
        inAProdDeclVarProgramaEsq(node);
        if(node.getProdDeclVar() != null)
        {
            node.getProdDeclVar().apply(this);
        }
        outAProdDeclVarProgramaEsq(node);
    }

    public void inAProdDeclConstProgramaEsq(AProdDeclConstProgramaEsq node)
    {
        defaultIn(node);
    }

    public void outAProdDeclConstProgramaEsq(AProdDeclConstProgramaEsq node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProdDeclConstProgramaEsq(AProdDeclConstProgramaEsq node)
    {
        inAProdDeclConstProgramaEsq(node);
        if(node.getProdDeclConst() != null)
        {
            node.getProdDeclConst().apply(this);
        }
        outAProdDeclConstProgramaEsq(node);
    }

    public void inAProdDeclProcedimentoProgramaDir(AProdDeclProcedimentoProgramaDir node)
    {
        defaultIn(node);
    }

    public void outAProdDeclProcedimentoProgramaDir(AProdDeclProcedimentoProgramaDir node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProdDeclProcedimentoProgramaDir(AProdDeclProcedimentoProgramaDir node)
    {
        inAProdDeclProcedimentoProgramaDir(node);
        if(node.getProdDeclProcedimento() != null)
        {
            node.getProdDeclProcedimento().apply(this);
        }
        outAProdDeclProcedimentoProgramaDir(node);
    }

    public void inAProdDeclFuncaoProgramaDir(AProdDeclFuncaoProgramaDir node)
    {
        defaultIn(node);
    }

    public void outAProdDeclFuncaoProgramaDir(AProdDeclFuncaoProgramaDir node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProdDeclFuncaoProgramaDir(AProdDeclFuncaoProgramaDir node)
    {
        inAProdDeclFuncaoProgramaDir(node);
        if(node.getProdDeclFuncao() != null)
        {
            node.getProdDeclFuncao().apply(this);
        }
        outAProdDeclFuncaoProgramaDir(node);
    }

    public void inAVarIdProdDeclVar(AVarIdProdDeclVar node)
    {
        defaultIn(node);
    }

    public void outAVarIdProdDeclVar(AVarIdProdDeclVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarIdProdDeclVar(AVarIdProdDeclVar node)
    {
        inAVarIdProdDeclVar(node);
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        if(node.getDoisPontos() != null)
        {
            node.getDoisPontos().apply(this);
        }
        if(node.getDeclVar() != null)
        {
            node.getDeclVar().apply(this);
        }
        outAVarIdProdDeclVar(node);
    }

    public void inAVarIdAtribuicaoProdDeclVar(AVarIdAtribuicaoProdDeclVar node)
    {
        defaultIn(node);
    }

    public void outAVarIdAtribuicaoProdDeclVar(AVarIdAtribuicaoProdDeclVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarIdAtribuicaoProdDeclVar(AVarIdAtribuicaoProdDeclVar node)
    {
        inAVarIdAtribuicaoProdDeclVar(node);
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        if(node.getIdAtribuicao() != null)
        {
            node.getIdAtribuicao().apply(this);
        }
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        if(node.getDoisPontos() != null)
        {
            node.getDoisPontos().apply(this);
        }
        if(node.getDeclVar() != null)
        {
            node.getDeclVar().apply(this);
        }
        outAVarIdAtribuicaoProdDeclVar(node);
    }

    public void inAConstanteProdDeclConst(AConstanteProdDeclConst node)
    {
        defaultIn(node);
    }

    public void outAConstanteProdDeclConst(AConstanteProdDeclConst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConstanteProdDeclConst(AConstanteProdDeclConst node)
    {
        inAConstanteProdDeclConst(node);
        if(node.getIdAtribuicao() != null)
        {
            node.getIdAtribuicao().apply(this);
        }
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        outAConstanteProdDeclConst(node);
    }

    public void inAIdAtribuicaoIdAtribuicao(AIdAtribuicaoIdAtribuicao node)
    {
        defaultIn(node);
    }

    public void outAIdAtribuicaoIdAtribuicao(AIdAtribuicaoIdAtribuicao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdAtribuicaoIdAtribuicao(AIdAtribuicaoIdAtribuicao node)
    {
        inAIdAtribuicaoIdAtribuicao(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        outAIdAtribuicaoIdAtribuicao(node);
    }

    public void inATipoBaseTipo(ATipoBaseTipo node)
    {
        defaultIn(node);
    }

    public void outATipoBaseTipo(ATipoBaseTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATipoBaseTipo(ATipoBaseTipo node)
    {
        inATipoBaseTipo(node);
        if(node.getTipoBase() != null)
        {
            node.getTipoBase().apply(this);
        }
        outATipoBaseTipo(node);
    }

    public void inATipoExpTipo(ATipoExpTipo node)
    {
        defaultIn(node);
    }

    public void outATipoExpTipo(ATipoExpTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATipoExpTipo(ATipoExpTipo node)
    {
        inATipoExpTipo(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        outATipoExpTipo(node);
    }

    public void inATipoInteiroTipoBase(ATipoInteiroTipoBase node)
    {
        defaultIn(node);
    }

    public void outATipoInteiroTipoBase(ATipoInteiroTipoBase node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATipoInteiroTipoBase(ATipoInteiroTipoBase node)
    {
        inATipoInteiroTipoBase(node);
        if(node.getTipoInteiro() != null)
        {
            node.getTipoInteiro().apply(this);
        }
        outATipoInteiroTipoBase(node);
    }

    public void inATipoBooleanoTipoBase(ATipoBooleanoTipoBase node)
    {
        defaultIn(node);
    }

    public void outATipoBooleanoTipoBase(ATipoBooleanoTipoBase node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATipoBooleanoTipoBase(ATipoBooleanoTipoBase node)
    {
        inATipoBooleanoTipoBase(node);
        if(node.getTipoBooleano() != null)
        {
            node.getTipoBooleano().apply(this);
        }
        outATipoBooleanoTipoBase(node);
    }

    public void inATipoRealTipoBase(ATipoRealTipoBase node)
    {
        defaultIn(node);
    }

    public void outATipoRealTipoBase(ATipoRealTipoBase node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATipoRealTipoBase(ATipoRealTipoBase node)
    {
        inATipoRealTipoBase(node);
        if(node.getTipoReal() != null)
        {
            node.getTipoReal().apply(this);
        }
        outATipoRealTipoBase(node);
    }

    public void inATipoCadeiaTipoBase(ATipoCadeiaTipoBase node)
    {
        defaultIn(node);
    }

    public void outATipoCadeiaTipoBase(ATipoCadeiaTipoBase node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATipoCadeiaTipoBase(ATipoCadeiaTipoBase node)
    {
        inATipoCadeiaTipoBase(node);
        if(node.getTipoCadeia() != null)
        {
            node.getTipoCadeia().apply(this);
        }
        outATipoCadeiaTipoBase(node);
    }

    public void inAProdDeclProcedimentoProdDeclProcedimento(AProdDeclProcedimentoProdDeclProcedimento node)
    {
        defaultIn(node);
    }

    public void outAProdDeclProcedimentoProdDeclProcedimento(AProdDeclProcedimentoProdDeclProcedimento node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProdDeclProcedimentoProdDeclProcedimento(AProdDeclProcedimentoProdDeclProcedimento node)
    {
        inAProdDeclProcedimentoProdDeclProcedimento(node);
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        if(node.getParDir() != null)
        {
            node.getParDir().apply(this);
        }
        if(node.getParametros() != null)
        {
            node.getParametros().apply(this);
        }
        if(node.getParEsq() != null)
        {
            node.getParEsq().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getDoisPontos() != null)
        {
            node.getDoisPontos().apply(this);
        }
        if(node.getDeclProcedimento() != null)
        {
            node.getDeclProcedimento().apply(this);
        }
        if(node.getPartida() != null)
        {
            node.getPartida().apply(this);
        }
        outAProdDeclProcedimentoProdDeclProcedimento(node);
    }

    public void inAProdDeclFuncaoProdDeclFuncao(AProdDeclFuncaoProdDeclFuncao node)
    {
        defaultIn(node);
    }

    public void outAProdDeclFuncaoProdDeclFuncao(AProdDeclFuncaoProdDeclFuncao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProdDeclFuncaoProdDeclFuncao(AProdDeclFuncaoProdDeclFuncao node)
    {
        inAProdDeclFuncaoProdDeclFuncao(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getParametros() != null)
        {
            node.getParametros().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        outAProdDeclFuncaoProdDeclFuncao(node);
    }

    public void inAParametroParametros(AParametroParametros node)
    {
        defaultIn(node);
    }

    public void outAParametroParametros(AParametroParametros node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParametroParametros(AParametroParametros node)
    {
        inAParametroParametros(node);
        {
            List<PBarraParametro> copy = new ArrayList<PBarraParametro>(node.getBarraParametro());
            Collections.reverse(copy);
            for(PBarraParametro e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getParametro() != null)
        {
            node.getParametro().apply(this);
        }
        outAParametroParametros(node);
    }

    public void inAVazioParametros(AVazioParametros node)
    {
        defaultIn(node);
    }

    public void outAVazioParametros(AVazioParametros node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVazioParametros(AVazioParametros node)
    {
        inAVazioParametros(node);
        outAVazioParametros(node);
    }

    public void inABarraParametroBarraParametro(ABarraParametroBarraParametro node)
    {
        defaultIn(node);
    }

    public void outABarraParametroBarraParametro(ABarraParametroBarraParametro node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABarraParametroBarraParametro(ABarraParametroBarraParametro node)
    {
        inABarraParametroBarraParametro(node);
        if(node.getParametro() != null)
        {
            node.getParametro().apply(this);
        }
        if(node.getBarra() != null)
        {
            node.getBarra().apply(this);
        }
        outABarraParametroBarraParametro(node);
    }

    public void inATipoParametroParametro(ATipoParametroParametro node)
    {
        defaultIn(node);
    }

    public void outATipoParametroParametro(ATipoParametroParametro node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATipoParametroParametro(ATipoParametroParametro node)
    {
        inATipoParametroParametro(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getTipoParametro() != null)
        {
            node.getTipoParametro().apply(this);
        }
        outATipoParametroParametro(node);
    }

    public void inATipoBaseTipoParametro(ATipoBaseTipoParametro node)
    {
        defaultIn(node);
    }

    public void outATipoBaseTipoParametro(ATipoBaseTipoParametro node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATipoBaseTipoParametro(ATipoBaseTipoParametro node)
    {
        inATipoBaseTipoParametro(node);
        if(node.getTipoBase() != null)
        {
            node.getTipoBase().apply(this);
        }
        outATipoBaseTipoParametro(node);
    }

    public void inATipoParametroTipoParametro(ATipoParametroTipoParametro node)
    {
        defaultIn(node);
    }

    public void outATipoParametroTipoParametro(ATipoParametroTipoParametro node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATipoParametroTipoParametro(ATipoParametroTipoParametro node)
    {
        inATipoParametroTipoParametro(node);
        if(node.getColDir() != null)
        {
            node.getColDir().apply(this);
        }
        if(node.getColEsq() != null)
        {
            node.getColEsq().apply(this);
        }
        if(node.getTipoParametro() != null)
        {
            node.getTipoParametro().apply(this);
        }
        outATipoParametroTipoParametro(node);
    }

    public void inAComandoSeSolteiroComandoSeSolteiro(AComandoSeSolteiroComandoSeSolteiro node)
    {
        defaultIn(node);
    }

    public void outAComandoSeSolteiroComandoSeSolteiro(AComandoSeSolteiroComandoSeSolteiro node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoSeSolteiroComandoSeSolteiro(AComandoSeSolteiroComandoSeSolteiro node)
    {
        inAComandoSeSolteiroComandoSeSolteiro(node);
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAComandoSeSolteiroComandoSeSolteiro(node);
    }

    public void inAComandoSeSenaoSolteiroComandoSeSolteiro(AComandoSeSenaoSolteiroComandoSeSolteiro node)
    {
        defaultIn(node);
    }

    public void outAComandoSeSenaoSolteiroComandoSeSolteiro(AComandoSeSenaoSolteiroComandoSeSolteiro node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoSeSenaoSolteiroComandoSeSolteiro(AComandoSeSenaoSolteiroComandoSeSolteiro node)
    {
        inAComandoSeSenaoSolteiroComandoSeSolteiro(node);
        if(node.getComandoSenao() != null)
        {
            node.getComandoSenao().apply(this);
        }
        if(node.getComandoSe() != null)
        {
            node.getComandoSe().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAComandoSeSenaoSolteiroComandoSeSolteiro(node);
    }

    public void inAEnquantoComandoComandoSeSolteiro(AEnquantoComandoComandoSeSolteiro node)
    {
        defaultIn(node);
    }

    public void outAEnquantoComandoComandoSeSolteiro(AEnquantoComandoComandoSeSolteiro node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEnquantoComandoComandoSeSolteiro(AEnquantoComandoComandoSeSolteiro node)
    {
        inAEnquantoComandoComandoSeSolteiro(node);
        if(node.getComandoSeSolteiro() != null)
        {
            node.getComandoSeSolteiro().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAEnquantoComandoComandoSeSolteiro(node);
    }

    public void inAComandoSeSenaoCasadoComandoSeCasado(AComandoSeSenaoCasadoComandoSeCasado node)
    {
        defaultIn(node);
    }

    public void outAComandoSeSenaoCasadoComandoSeCasado(AComandoSeSenaoCasadoComandoSeCasado node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoSeSenaoCasadoComandoSeCasado(AComandoSeSenaoCasadoComandoSeCasado node)
    {
        inAComandoSeSenaoCasadoComandoSeCasado(node);
        if(node.getComandoSenao() != null)
        {
            node.getComandoSenao().apply(this);
        }
        if(node.getComandoSe() != null)
        {
            node.getComandoSe().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAComandoSeSenaoCasadoComandoSeCasado(node);
    }

    public void inAEnquantoComandoComandoSeCasado(AEnquantoComandoComandoSeCasado node)
    {
        defaultIn(node);
    }

    public void outAEnquantoComandoComandoSeCasado(AEnquantoComandoComandoSeCasado node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEnquantoComandoComandoSeCasado(AEnquantoComandoComandoSeCasado node)
    {
        inAEnquantoComandoComandoSeCasado(node);
        if(node.getComandoSeCasado() != null)
        {
            node.getComandoSeCasado().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAEnquantoComandoComandoSeCasado(node);
    }

    public void inAIdAtribuicaoComandoComandoSeCasado(AIdAtribuicaoComandoComandoSeCasado node)
    {
        defaultIn(node);
    }

    public void outAIdAtribuicaoComandoComandoSeCasado(AIdAtribuicaoComandoComandoSeCasado node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdAtribuicaoComandoComandoSeCasado(AIdAtribuicaoComandoComandoSeCasado node)
    {
        inAIdAtribuicaoComandoComandoSeCasado(node);
        if(node.getIdAtribuicao() != null)
        {
            node.getIdAtribuicao().apply(this);
        }
        outAIdAtribuicaoComandoComandoSeCasado(node);
    }

    public void inAChamadaProcedimentoComandoComandoSeCasado(AChamadaProcedimentoComandoComandoSeCasado node)
    {
        defaultIn(node);
    }

    public void outAChamadaProcedimentoComandoComandoSeCasado(AChamadaProcedimentoComandoComandoSeCasado node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAChamadaProcedimentoComandoComandoSeCasado(AChamadaProcedimentoComandoComandoSeCasado node)
    {
        inAChamadaProcedimentoComandoComandoSeCasado(node);
        if(node.getChamadaProcedimento() != null)
        {
            node.getChamadaProcedimento().apply(this);
        }
        outAChamadaProcedimentoComandoComandoSeCasado(node);
    }

    public void inABlocoComandosComandoSeCasado(ABlocoComandosComandoSeCasado node)
    {
        defaultIn(node);
    }

    public void outABlocoComandosComandoSeCasado(ABlocoComandosComandoSeCasado node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlocoComandosComandoSeCasado(ABlocoComandosComandoSeCasado node)
    {
        inABlocoComandosComandoSeCasado(node);
        if(node.getBlocoComandos() != null)
        {
            node.getBlocoComandos().apply(this);
        }
        outABlocoComandosComandoSeCasado(node);
    }

    public void inAComandoSeCasadoComando(AComandoSeCasadoComando node)
    {
        defaultIn(node);
    }

    public void outAComandoSeCasadoComando(AComandoSeCasadoComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoSeCasadoComando(AComandoSeCasadoComando node)
    {
        inAComandoSeCasadoComando(node);
        if(node.getComandoSeCasado() != null)
        {
            node.getComandoSeCasado().apply(this);
        }
        outAComandoSeCasadoComando(node);
    }

    public void inAComandoSeSolteiroComando(AComandoSeSolteiroComando node)
    {
        defaultIn(node);
    }

    public void outAComandoSeSolteiroComando(AComandoSeSolteiroComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoSeSolteiroComando(AComandoSeSolteiroComando node)
    {
        inAComandoSeSolteiroComando(node);
        if(node.getComandoSeSolteiro() != null)
        {
            node.getComandoSeSolteiro().apply(this);
        }
        outAComandoSeSolteiroComando(node);
    }

    public void inABlocoComandosBlocoComandos(ABlocoComandosBlocoComandos node)
    {
        defaultIn(node);
    }

    public void outABlocoComandosBlocoComandos(ABlocoComandosBlocoComandos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlocoComandosBlocoComandos(ABlocoComandosBlocoComandos node)
    {
        inABlocoComandosBlocoComandos(node);
        if(node.getFimBloco() != null)
        {
            node.getFimBloco().apply(this);
        }
        {
            List<PComando> copy = new ArrayList<PComando>(node.getComando());
            Collections.reverse(copy);
            for(PComando e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PProgramaEsq> copy = new ArrayList<PProgramaEsq>(node.getProgramaEsq());
            Collections.reverse(copy);
            for(PProgramaEsq e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getInicioBloco() != null)
        {
            node.getInicioBloco().apply(this);
        }
        outABlocoComandosBlocoComandos(node);
    }

    public void inAValorValor(AValorValor node)
    {
        defaultIn(node);
    }

    public void outAValorValor(AValorValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAValorValor(AValorValor node)
    {
        inAValorValor(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAValorValor(node);
    }

    public void inAValorArrayValor(AValorArrayValor node)
    {
        defaultIn(node);
    }

    public void outAValorArrayValor(AValorArrayValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAValorArrayValor(AValorArrayValor node)
    {
        inAValorArrayValor(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        outAValorArrayValor(node);
    }

    public void inAChamadaChamadaProcedimento(AChamadaChamadaProcedimento node)
    {
        defaultIn(node);
    }

    public void outAChamadaChamadaProcedimento(AChamadaChamadaProcedimento node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAChamadaChamadaProcedimento(AChamadaChamadaProcedimento node)
    {
        inAChamadaChamadaProcedimento(node);
        {
            List<PExp> copy = new ArrayList<PExp>(node.getListaExp());
            Collections.reverse(copy);
            for(PExp e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAChamadaChamadaProcedimento(node);
    }

    public void inAOuExp(AOuExp node)
    {
        defaultIn(node);
    }

    public void outAOuExp(AOuExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOuExp(AOuExp node)
    {
        inAOuExp(node);
        if(node.getDireita() != null)
        {
            node.getDireita().apply(this);
        }
        if(node.getEsquerda() != null)
        {
            node.getEsquerda().apply(this);
        }
        outAOuExp(node);
    }

    public void inAEExp(AEExp node)
    {
        defaultIn(node);
    }

    public void outAEExp(AEExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEExp(AEExp node)
    {
        inAEExp(node);
        if(node.getDireita() != null)
        {
            node.getDireita().apply(this);
        }
        if(node.getEsquerda() != null)
        {
            node.getEsquerda().apply(this);
        }
        outAEExp(node);
    }

    public void inAIgualExp(AIgualExp node)
    {
        defaultIn(node);
    }

    public void outAIgualExp(AIgualExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIgualExp(AIgualExp node)
    {
        inAIgualExp(node);
        if(node.getDireita() != null)
        {
            node.getDireita().apply(this);
        }
        if(node.getEsquerda() != null)
        {
            node.getEsquerda().apply(this);
        }
        outAIgualExp(node);
    }

    public void inAMaiorIgualExp(AMaiorIgualExp node)
    {
        defaultIn(node);
    }

    public void outAMaiorIgualExp(AMaiorIgualExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaiorIgualExp(AMaiorIgualExp node)
    {
        inAMaiorIgualExp(node);
        if(node.getDireita() != null)
        {
            node.getDireita().apply(this);
        }
        if(node.getEsquerda() != null)
        {
            node.getEsquerda().apply(this);
        }
        outAMaiorIgualExp(node);
    }

    public void inAMaiorExp(AMaiorExp node)
    {
        defaultIn(node);
    }

    public void outAMaiorExp(AMaiorExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaiorExp(AMaiorExp node)
    {
        inAMaiorExp(node);
        if(node.getDireita() != null)
        {
            node.getDireita().apply(this);
        }
        if(node.getEsquerda() != null)
        {
            node.getEsquerda().apply(this);
        }
        outAMaiorExp(node);
    }

    public void inASomaExp(ASomaExp node)
    {
        defaultIn(node);
    }

    public void outASomaExp(ASomaExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASomaExp(ASomaExp node)
    {
        inASomaExp(node);
        if(node.getDireita() != null)
        {
            node.getDireita().apply(this);
        }
        if(node.getEsquerda() != null)
        {
            node.getEsquerda().apply(this);
        }
        outASomaExp(node);
    }

    public void inAMenosExp(AMenosExp node)
    {
        defaultIn(node);
    }

    public void outAMenosExp(AMenosExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenosExp(AMenosExp node)
    {
        inAMenosExp(node);
        if(node.getDireita() != null)
        {
            node.getDireita().apply(this);
        }
        if(node.getEsquerda() != null)
        {
            node.getEsquerda().apply(this);
        }
        outAMenosExp(node);
    }

    public void inAMultExp(AMultExp node)
    {
        defaultIn(node);
    }

    public void outAMultExp(AMultExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultExp(AMultExp node)
    {
        inAMultExp(node);
        if(node.getDireita() != null)
        {
            node.getDireita().apply(this);
        }
        if(node.getEsquerda() != null)
        {
            node.getEsquerda().apply(this);
        }
        outAMultExp(node);
    }

    public void inADivExp(ADivExp node)
    {
        defaultIn(node);
    }

    public void outADivExp(ADivExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivExp(ADivExp node)
    {
        inADivExp(node);
        if(node.getDireita() != null)
        {
            node.getDireita().apply(this);
        }
        if(node.getEsquerda() != null)
        {
            node.getEsquerda().apply(this);
        }
        outADivExp(node);
    }

    public void inAModExp(AModExp node)
    {
        defaultIn(node);
    }

    public void outAModExp(AModExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAModExp(AModExp node)
    {
        inAModExp(node);
        if(node.getDireita() != null)
        {
            node.getDireita().apply(this);
        }
        if(node.getEsquerda() != null)
        {
            node.getEsquerda().apply(this);
        }
        outAModExp(node);
    }

    public void inATernarioExp(ATernarioExp node)
    {
        defaultIn(node);
    }

    public void outATernarioExp(ATernarioExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATernarioExp(ATernarioExp node)
    {
        inATernarioExp(node);
        if(node.getFalso() != null)
        {
            node.getFalso().apply(this);
        }
        if(node.getVerdadeiro() != null)
        {
            node.getVerdadeiro().apply(this);
        }
        if(node.getCond() != null)
        {
            node.getCond().apply(this);
        }
        outATernarioExp(node);
    }

    public void inANegacaoExp(ANegacaoExp node)
    {
        defaultIn(node);
    }

    public void outANegacaoExp(ANegacaoExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANegacaoExp(ANegacaoExp node)
    {
        inANegacaoExp(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outANegacaoExp(node);
    }

    public void inANegativoExp(ANegativoExp node)
    {
        defaultIn(node);
    }

    public void outANegativoExp(ANegativoExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANegativoExp(ANegativoExp node)
    {
        inANegativoExp(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outANegativoExp(node);
    }

    public void inANumeroIntExp(ANumeroIntExp node)
    {
        defaultIn(node);
    }

    public void outANumeroIntExp(ANumeroIntExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumeroIntExp(ANumeroIntExp node)
    {
        inANumeroIntExp(node);
        if(node.getNumeroInt() != null)
        {
            node.getNumeroInt().apply(this);
        }
        outANumeroIntExp(node);
    }

    public void inANumeroRealExp(ANumeroRealExp node)
    {
        defaultIn(node);
    }

    public void outANumeroRealExp(ANumeroRealExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumeroRealExp(ANumeroRealExp node)
    {
        inANumeroRealExp(node);
        if(node.getNumeroReal() != null)
        {
            node.getNumeroReal().apply(this);
        }
        outANumeroRealExp(node);
    }

    public void inACadeiaExp(ACadeiaExp node)
    {
        defaultIn(node);
    }

    public void outACadeiaExp(ACadeiaExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACadeiaExp(ACadeiaExp node)
    {
        inACadeiaExp(node);
        if(node.getCadeia() != null)
        {
            node.getCadeia().apply(this);
        }
        outACadeiaExp(node);
    }

    public void inAVerdadeExp(AVerdadeExp node)
    {
        defaultIn(node);
    }

    public void outAVerdadeExp(AVerdadeExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVerdadeExp(AVerdadeExp node)
    {
        inAVerdadeExp(node);
        if(node.getVerdade() != null)
        {
            node.getVerdade().apply(this);
        }
        outAVerdadeExp(node);
    }

    public void inAFalsoExp(AFalsoExp node)
    {
        defaultIn(node);
    }

    public void outAFalsoExp(AFalsoExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFalsoExp(AFalsoExp node)
    {
        inAFalsoExp(node);
        if(node.getFalso() != null)
        {
            node.getFalso().apply(this);
        }
        outAFalsoExp(node);
    }

    public void inAValorExp(AValorExp node)
    {
        defaultIn(node);
    }

    public void outAValorExp(AValorExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAValorExp(AValorExp node)
    {
        inAValorExp(node);
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        outAValorExp(node);
    }

    public void inAChamadaFuncaoExp(AChamadaFuncaoExp node)
    {
        defaultIn(node);
    }

    public void outAChamadaFuncaoExp(AChamadaFuncaoExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAChamadaFuncaoExp(AChamadaFuncaoExp node)
    {
        inAChamadaFuncaoExp(node);
        {
            List<PExp> copy = new ArrayList<PExp>(node.getListaExp());
            Collections.reverse(copy);
            for(PExp e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAChamadaFuncaoExp(node);
    }

    public void inAVazioExp(AVazioExp node)
    {
        defaultIn(node);
    }

    public void outAVazioExp(AVazioExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVazioExp(AVazioExp node)
    {
        inAVazioExp(node);
        outAVazioExp(node);
    }

    public void inABlocoExpressoesExp(ABlocoExpressoesExp node)
    {
        defaultIn(node);
    }

    public void outABlocoExpressoesExp(ABlocoExpressoesExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlocoExpressoesExp(ABlocoExpressoesExp node)
    {
        inABlocoExpressoesExp(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        {
            List<PProdDeclConst> copy = new ArrayList<PProdDeclConst>(node.getListaDeclConst());
            Collections.reverse(copy);
            for(PProdDeclConst e : copy)
            {
                e.apply(this);
            }
        }
        outABlocoExpressoesExp(node);
    }

    public void inAArrayCompExp(AArrayCompExp node)
    {
        defaultIn(node);
    }

    public void outAArrayCompExp(AArrayCompExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayCompExp(AArrayCompExp node)
    {
        inAArrayCompExp(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAArrayCompExp(node);
    }
}
